<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>有感而发，随便写写</title>
    <link href="/2025/08/13/%E6%9C%89%E6%84%9F%E8%80%8C%E5%8F%91%EF%BC%8C%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/"/>
    <url>/2025/08/13/%E6%9C%89%E6%84%9F%E8%80%8C%E5%8F%91%EF%BC%8C%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h2 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h2><p>这世界正变得越来越让人看不懂。从体感来讲，大概是 2016 年房地产增速狂飙的余波尚未散尽，2020 年疫情一来，经济便骤然显露出疲态，仿佛一脚踩进了减速带。</p><p>疫情像个突兀的休止符，打乱了所有人对未来的节奏。曾经习以为常的消费信心开始收缩，不是没钱，更多是不敢——对明天的不确定感像层薄雾，慢慢浸透着日常决策。这让我想起另一件事：2016 年前后的房地产热潮，本质上是提前支取了未来 30 年的预期。那时候，所有人都默认经济会一直高速奔跑，足以撑起这笔”向未来的借款”。可一旦需求端先松了劲，那些曾经的增量便会转身变成沉甸甸的负债。</p><p>近来频繁出台的消费补贴、贴息贷款，与其说是刺激，不如说是在给冷却的市场添柴。但火能不能旺起来，终究看人心。当大家开始下意识攥紧钱包，本质上是对未来的信心在动摇。这种状态会持续多久？没人能说清，只是这信号本身，总让人心里沉甸甸的。</p><p>再往深想，绕不开人口这道坎。早些年吃人口红利太急，像是一场酣畅的盛宴，却没留意餐桌下的隐患。计划生育留下的人口结构断层，如今正悄悄显露出代价。养老金体系便是最直观的映照——曾经”一个人的税养一个人”的平衡被打破，当年享尽红利的一代逐渐步入退休，而劳动力人口的缩减，让这个体系开始显得摇摇欲坠。国家本无余钱，缺口只能从其他税收里调剂，于是便有了社保缴纳的强制收紧。说穿了，都是钱的压力逼出来的决策。</p><p>只是想起那些农民工群体，总觉得心里不是滋味。他们是被时代推着走的一代人，年轻时为城市建设添砖加瓦，老了却可能在保障体系的缝隙里徘徊。古人说”兴，百姓苦；亡，百姓苦”，原来千百年过去，有些滋味从未变过。</p><p>这些日子常想起一句话： 有良心的人赚不到钱。</p><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><p>只希望能早点好起来把， 富人受影响范围极小， 受影响的都是底层人，小资部分， 这部分对这部分的支出极为敏感， 收割的永远是大部分平民。<br>希望自己早期暴富， 能做出一点贡献。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统音量调节原理与实践</title>
    <link href="/2025/07/13/Linux%E7%B3%BB%E7%BB%9F%E9%9F%B3%E9%87%8F%E8%B0%83%E8%8A%82%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <url>/2025/07/13/Linux%E7%B3%BB%E7%BB%9F%E9%9F%B3%E9%87%8F%E8%B0%83%E8%8A%82%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<p>在日常使用 Linux 系统时，音量调节是一个看似简单却涉及多个层次的操作。很多用户可能遇到过这样的困扰：明明调节了音量，但声音还是不对劲，或者插入 USB 音频设备后音量控制失效。今天我们就来深入了解 Linux 音频系统的工作原理，并提供一个实用的解决方案。</p><hr><h3 id="Linux-音频系统架构"><a href="#Linux-音频系统架构" class="headerlink" title="Linux 音频系统架构"></a><strong>Linux 音频系统架构</strong></h3><p>Linux 的音频系统采用分层架构，从底层到应用层依次包括：</p><h4 id="1-硬件层（ALSA-驱动）"><a href="#1-硬件层（ALSA-驱动）" class="headerlink" title="1. 硬件层（ALSA 驱动）"></a><strong>1. 硬件层（ALSA 驱动）</strong></h4><p>ALSA（Advanced Linux Sound Architecture）是 Linux 内核的音频子系统，直接与音频硬件交互。它提供：</p><ul><li>硬件设备驱动</li><li>基础的音量控制</li><li>多声道支持</li><li>低延迟音频处理</li></ul><h4 id="2-音频服务层（PulseAudio-PipeWire）"><a href="#2-音频服务层（PulseAudio-PipeWire）" class="headerlink" title="2. 音频服务层（PulseAudio&#x2F;PipeWire）"></a><strong>2. 音频服务层（PulseAudio&#x2F;PipeWire）</strong></h4><p>现代 Linux 发行版通常使用 PulseAudio 或 PipeWire 作为音频服务器：</p><ul><li><strong>PulseAudio</strong>: 提供网络音频、设备管理、音量控制等高级功能</li><li><strong>PipeWire</strong>: 新一代音频服务器，同时支持音频和视频，兼容 PulseAudio</li></ul><h4 id="3-应用层"><a href="#3-应用层" class="headerlink" title="3. 应用层"></a><strong>3. 应用层</strong></h4><p>各种音频应用程序通过音频 API 与音频服务交互。</p><hr><h3 id="音量控制的工作原理"><a href="#音量控制的工作原理" class="headerlink" title="音量控制的工作原理"></a><strong>音量控制的工作原理</strong></h3><p>Linux 系统中的音量控制实际上发生在多个层次：</p><h4 id="硬件音量-vs-软件音量"><a href="#硬件音量-vs-软件音量" class="headerlink" title="硬件音量 vs 软件音量"></a><strong>硬件音量 vs 软件音量</strong></h4><ul><li><strong>硬件音量</strong>: 由音频芯片或外部设备直接控制，改变模拟信号强度</li><li><strong>软件音量</strong>: 在数字信号处理阶段进行音量调节</li></ul><h4 id="音量控制流程"><a href="#音量控制流程" class="headerlink" title="音量控制流程"></a><strong>音量控制流程</strong></h4><ol><li>应用程序产生数字音频信号</li><li>音频服务器应用软件音量调节</li><li>信号传递给 ALSA 驱动</li><li>ALSA 应用硬件音量设置</li><li>最终输出到音频设备</li></ol><hr><h3 id="常见问题与解决方案"><a href="#常见问题与解决方案" class="headerlink" title="常见问题与解决方案"></a><strong>常见问题与解决方案</strong></h3><h4 id="USB-音频设备音量问题"><a href="#USB-音频设备音量问题" class="headerlink" title="USB 音频设备音量问题"></a><strong>USB 音频设备音量问题</strong></h4><p>USB 音频设备经常遇到音量控制失效的问题，主要原因：</p><ul><li>设备不支持硬件音量控制</li><li>驱动程序兼容性问题</li><li>音频服务配置不当</li></ul><h4 id="解决方案：USB-音频硬件音量修复脚本"><a href="#解决方案：USB-音频硬件音量修复脚本" class="headerlink" title="解决方案：USB 音频硬件音量修复脚本"></a><strong>解决方案：USB 音频硬件音量修复脚本</strong></h4><p>为了解决 USB 音频设备的音量控制问题，我们提供了一个专门的修复脚本。</p><p><strong>脚本位置</strong>: <code>/usr/local/bin/usb_audio_hardware_volume_fix.sh</code></p><p><strong>脚本功能</strong>:</p><ol><li>自动检测系统中的 USB 音频设备</li><li>重置 PulseAudio 配置以优化音频处理</li><li>强制启用软件音量控制模式</li><li>优化 ALSA 驱动参数</li><li>自动测试音频输出</li></ol><p><strong>使用方法</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装脚本（需要管理员权限）</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> usb_audio_hardware_volume_fix.sh /usr/local/bin/<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/local/bin/usb_audio_hardware_volume_fix.sh<br><br><span class="hljs-comment"># 运行脚本</span><br>usb_audio_hardware_volume_fix.sh<br></code></pre></td></tr></table></figure><p><strong>脚本工作原理</strong>:</p><ul><li>通过<code>lsusb</code>命令检测 USB 音频设备</li><li>重新加载<code>snd_usb_audio</code>内核模块</li><li>创建优化的 PulseAudio 配置文件</li><li>设置 ALSA 模块参数以忽略硬件音量控制错误</li><li>强制所有音频设备使用软件音量控制</li></ul><hr><h3 id="手动音量控制命令"><a href="#手动音量控制命令" class="headerlink" title="手动音量控制命令"></a><strong>手动音量控制命令</strong></h3><p>除了使用脚本，你也可以手动控制音量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看音频设备</span><br>pactl list short sinks<br><br><span class="hljs-comment"># 设置音量（0-100%）</span><br>pactl set-sink-volume @DEFAULT_SINK@ 50%<br><br><span class="hljs-comment"># 增大/减小音量</span><br>pactl set-sink-volume @DEFAULT_SINK@ +10%<br>pactl set-sink-volume @DEFAULT_SINK@ -10%<br><br><span class="hljs-comment"># 静音/取消静音</span><br>pactl set-sink-mute @DEFAULT_SINK@ toggle<br><br><span class="hljs-comment"># 使用ALSA工具</span><br>amixer <span class="hljs-built_in">set</span> Master 50%<br>amixer <span class="hljs-built_in">set</span> Master 5%+<br>amixer <span class="hljs-built_in">set</span> Master 5%-<br></code></pre></td></tr></table></figure><hr><h3 id="图形化音量控制工具"><a href="#图形化音量控制工具" class="headerlink" title="图形化音量控制工具"></a><strong>图形化音量控制工具</strong></h3><p>对于喜欢图形界面的用户，推荐使用：</p><ol><li><strong>pavucontrol</strong>: PulseAudio 的图形控制面板</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> pacman -S pavucontrol  <span class="hljs-comment"># Arch/Manjaro</span><br><span class="hljs-built_in">sudo</span> apt install pavucontrol  <span class="hljs-comment"># Ubuntu/Debian</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>alsamixer</strong>: ALSA 的文本界面控制器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">alsamixer<br></code></pre></td></tr></table></figure><hr><h3 id="常见问题排查"><a href="#常见问题排查" class="headerlink" title="常见问题排查"></a><strong>常见问题排查</strong></h3><h4 id="音量调节无效"><a href="#音量调节无效" class="headerlink" title="音量调节无效"></a><strong>音量调节无效</strong></h4><ol><li>检查音频服务状态: <code>systemctl --user status pulseaudio</code></li><li>重启音频服务: <code>pulseaudio -k &amp;&amp; pulseaudio --start</code></li><li>检查设备是否被正确识别: <code>pactl list short sinks</code></li></ol><h4 id="USB-设备无声音"><a href="#USB-设备无声音" class="headerlink" title="USB 设备无声音"></a><strong>USB 设备无声音</strong></h4><ol><li>确认设备连接: <code>lsusb | grep -i audio</code></li><li>检查 ALSA 设备: <code>aplay -l</code></li><li>设置默认输出设备: <code>pactl set-default-sink [设备名称]</code></li></ol><h4 id="音质问题"><a href="#音质问题" class="headerlink" title="音质问题"></a><strong>音质问题</strong></h4><ol><li>调整采样率: 编辑<code>/etc/pulse/daemon.conf</code></li><li>禁用音频处理: <code>flat-volumes = no</code></li><li>使用高质量重采样: <code>resample-method = speex-float-10</code></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>Linux 音频系统虽然复杂，但理解了其分层架构后，大部分音量问题都能迎刃而解。关键要点：</p><ol><li><strong>硬件音量 vs 软件音量</strong>: 了解两者区别，选择合适的控制方式</li><li><strong>PulseAudio 配置</strong>: 正确配置音频服务器是解决问题的关键</li><li><strong>USB 设备特殊处理</strong>: 使用专门的脚本和配置优化 USB 音频体验</li><li><strong>工具组合使用</strong>: 命令行工具配合图形界面，提高效率</li></ol><p>通过本文介绍的方法和脚本，相信你能够更好地管理 Linux 系统的音频输出，享受更稳定的音频体验。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>音频</tag>
      
      <tag>系统管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轻松构建你的本地知识库问答系统</title>
    <link href="/2025/07/09/%E8%BD%BB%E6%9D%BE%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/07/09/%E8%BD%BB%E6%9D%BE%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84%E6%9C%AC%E5%9C%B0%E7%9F%A5%E8%AF%86%E5%BA%93%E9%97%AE%E7%AD%94%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>各位同学，有没有遇到过这种情况？电脑里存了一堆文档、资料、笔记，想找个信息却要翻半天，最后还不一定能找到想要的答案……要是有个私人助手，能瞬间从你的文档库中找到精准答案就好了！</p><p>别说，这事儿还真能实现！今天咱们就用大白话，聊聊最近很火的 RAG 技术，看看它怎么让你的文档”活”起来，变成一个会答题的智能助手。</p><hr><h3 id="RAG-是什么？为什么这么火？"><a href="#RAG-是什么？为什么这么火？" class="headerlink" title="RAG 是什么？为什么这么火？"></a><strong>RAG 是什么？为什么这么火？</strong></h3><p>RAG，全称 Retrieval-Augmented Generation（检索增强生成），听起来很高大上，其实就是**”先找资料，再回答问题”**的升级版。</p><p>传统搜索是什么样？你输入关键词，它给你一堆链接，你还得自己点进去找答案。而 RAG 呢？它会：</p><ol><li><strong>理解你的问题</strong>：不只是匹配关键词，而是真正”懂”你在问什么</li><li><strong>精准找资料</strong>：从你的文档库里找到最相关的内容片段</li><li><strong>智能生成答案</strong>：结合找到的资料，给你一个完整、准确的回答</li></ol><p>这就像有个超级聪明的图书管理员，不仅知道每本书在哪儿，还能帮你总结出你想要的答案！</p><p><strong>RAG 能解决什么实际问题？</strong></p><ul><li>企业知识库太庞大，员工找不到需要的信息</li><li>个人文档太多太杂，想找个东西像大海捞针</li><li>学习资料堆积如山，复习时找不到重点</li><li>技术文档更新频繁，总是找不到最新的解决方案</li></ul><hr><h3 id="RAG-的工作原理：像个聪明的图书管理员"><a href="#RAG-的工作原理：像个聪明的图书管理员" class="headerlink" title="RAG 的工作原理：像个聪明的图书管理员"></a><strong>RAG 的工作原理：像个聪明的图书管理员</strong></h3><p>想象一下，你走进一个超级智能的图书馆，这个图书管理员是怎么工作的：</p><h4 id="1-文档预处理：把知识”切块”存储"><a href="#1-文档预处理：把知识”切块”存储" class="headerlink" title="1. 文档预处理：把知识”切块”存储"></a><strong>1. 文档预处理：把知识”切块”存储</strong></h4><p>首先，管理员会把所有的书籍、文档都<strong>切成小块</strong>，每一块包含一个完整的知识点。为什么要切块？因为：</p><ul><li>太长的文档，AI 处理不过来</li><li>太短的片段，信息不完整</li><li>合适的块大小，既保证信息完整，又便于检索</li></ul><p>就像把一本厚厚的技术手册，按章节、按主题分成一张张卡片。</p><h4 id="2-向量化：让计算机”理解”文本含义"><a href="#2-向量化：让计算机”理解”文本含义" class="headerlink" title="2. 向量化：让计算机”理解”文本含义"></a><strong>2. 向量化：让计算机”理解”文本含义</strong></h4><p>接下来，管理员会给每张卡片贴上一个**”语义标签”**。这个标签不是简单的关键词，而是用数学向量来表示文本的含义。</p><p>比如”机器学习”和”人工智能”这两个词，虽然字面不同，但在向量空间里它们会很接近，因为含义相关。</p><p><strong>技术选择：</strong> 这里用的是 <a href="https://github.com/zhengchalei/rag-demo"><code>shibing624/text2vec-base-chinese</code></a> 模型，专门为中文优化，理解中文语义更准确。</p><h4 id="3-检索匹配：找到最相关的信息片段"><a href="#3-检索匹配：找到最相关的信息片段" class="headerlink" title="3. 检索匹配：找到最相关的信息片段"></a><strong>3. 检索匹配：找到最相关的信息片段</strong></h4><p>当你问问题时，系统会：</p><ol><li>把你的问题也转换成向量</li><li>在向量数据库中找到最相似的文档片段</li><li>返回最相关的几个候选答案</li></ol><p><strong>技术选择：</strong> 使用 <a href="https://github.com/zhengchalei/rag-demo"><code>ChromaDB</code></a> 作为向量数据库，它的优势是：</p><ul><li>高性能的向量检索</li><li>支持多种相似度计算方法</li><li>易于部署和维护</li></ul><h4 id="4-重排序优化：精选最佳答案素材"><a href="#4-重排序优化：精选最佳答案素材" class="headerlink" title="4. 重排序优化：精选最佳答案素材"></a><strong>4. 重排序优化：精选最佳答案素材</strong></h4><p>找到候选答案后，还要进行一次**”精选”**。这就像图书管理员不只是找到相关的书，还要挑出最有用的那几本。</p><p><strong>技术选择：</strong> 使用 <a href="https://github.com/zhengchalei/rag-demo"><code>cross-encoder/mmarco-mMiniLMv2-L12-H384-v1</code></a> 重排序模型，它能：</p><ul><li>更精准地判断文档与问题的相关性</li><li>支持多语言，中英文都能处理</li><li>大幅提升最终答案的质量</li></ul><h4 id="5-生成回答：结合检索结果生成答案"><a href="#5-生成回答：结合检索结果生成答案" class="headerlink" title="5. 生成回答：结合检索结果生成答案"></a><strong>5. 生成回答：结合检索结果生成答案</strong></h4><p>最后，AI 会结合检索到的相关文档，生成一个完整、准确的回答。</p><p><strong>技术选择：</strong> 使用 <a href="https://github.com/zhengchalei/rag-demo"><code>Google Gemini 2.5 Flash</code></a> API，特点是：</p><ul><li>响应速度快，适合实时问答</li><li>理解能力强，能很好地整合多个信息源</li><li>成本相对较低，适合个人和小团队使用</li></ul><hr><h3 id="技术栈选择：每个组件都有讲究"><a href="#技术栈选择：每个组件都有讲究" class="headerlink" title="技术栈选择：每个组件都有讲究"></a><strong>技术栈选择：每个组件都有讲究</strong></h3><p>构建一个好用的 RAG 系统，技术选型很关键。咱们这个项目的技术栈是这样搭配的：</p><h4 id="文本向量化：为什么选择中文优化模型？"><a href="#文本向量化：为什么选择中文优化模型？" class="headerlink" title="文本向量化：为什么选择中文优化模型？"></a><strong>文本向量化：为什么选择中文优化模型？</strong></h4><p>普通的向量化模型对中文支持不够好，经常出现：</p><ul><li>中文分词不准确</li><li>语义理解偏差</li><li>检索效果不理想</li></ul><p>所以选择了专门针对中文优化的 <code>text2vec-base-chinese</code> 模型，让系统更”懂”中文。</p><h4 id="向量数据库：ChromaDB-的优势"><a href="#向量数据库：ChromaDB-的优势" class="headerlink" title="向量数据库：ChromaDB 的优势"></a><strong>向量数据库：ChromaDB 的优势</strong></h4><p>相比其他向量数据库，ChromaDB 有这些优点：</p><ul><li><strong>轻量级</strong>：不需要复杂的部署，几行代码就能跑起来</li><li><strong>高性能</strong>：检索速度快，支持大规模数据</li><li><strong>易扩展</strong>：可以轻松添加新的文档和数据</li></ul><h4 id="重排序模型：提升答案质量的关键"><a href="#重排序模型：提升答案质量的关键" class="headerlink" title="重排序模型：提升答案质量的关键"></a><strong>重排序模型：提升答案质量的关键</strong></h4><p>很多人忽略了重排序这一步，但它真的很重要！没有重排序的 RAG 系统，经常会：</p><ul><li>返回相关但不准确的答案</li><li>答案质量不稳定</li><li>用户体验不好</li></ul><p>加上重排序后，答案质量能提升一个档次。</p><h4 id="包管理工具：现代化的-Python-环境"><a href="#包管理工具：现代化的-Python-环境" class="headerlink" title="包管理工具：现代化的 Python 环境"></a><strong>包管理工具：现代化的 Python 环境</strong></h4><p>项目使用了 <a href="https://github.com/zhengchalei/rag-demo"><code>UV</code></a> 作为包管理工具，相比传统的 pip：</p><ul><li><strong>速度更快</strong>：依赖安装速度提升数倍</li><li><strong>更可靠</strong>：依赖解析更准确，避免版本冲突</li><li><strong>更现代</strong>：支持现代 Python 开发最佳实践</li></ul><hr><h3 id="实际应用场景：RAG-能帮你做什么"><a href="#实际应用场景：RAG-能帮你做什么" class="headerlink" title="实际应用场景：RAG 能帮你做什么"></a><strong>实际应用场景：RAG 能帮你做什么</strong></h3><p>RAG 不是什么高不可攀的技术，它就在我们身边，能解决很多实际问题：</p><h4 id="1-企业知识库问答"><a href="#1-企业知识库问答" class="headerlink" title="1. 企业知识库问答"></a><strong>1. 企业知识库问答</strong></h4><ul><li><strong>场景</strong>：公司有大量的技术文档、操作手册、FAQ</li><li><strong>痛点</strong>：新员工找不到资料，老员工也记不住所有细节</li><li><strong>解决</strong>：搭建企业 RAG 系统，员工随时可以问问题，立刻得到准确答案</li></ul><h4 id="2-个人文档助手"><a href="#2-个人文档助手" class="headerlink" title="2. 个人文档助手"></a><strong>2. 个人文档助手</strong></h4><ul><li><strong>场景</strong>：个人电脑里有大量笔记、资料、收藏的文章</li><li><strong>痛点</strong>：想找个信息要翻半天，有时候明明记得看过但就是找不到</li><li><strong>解决</strong>：把所有文档导入 RAG 系统，变成你的私人知识助手</li></ul><h4 id="3-学习资料整理"><a href="#3-学习资料整理" class="headerlink" title="3. 学习资料整理"></a><strong>3. 学习资料整理</strong></h4><ul><li><strong>场景</strong>：学生或自学者有大量的课件、教材、笔记</li><li><strong>痛点</strong>：复习时找不到重点，知识点分散难以整合</li><li><strong>解决</strong>：RAG 系统能快速找到相关知识点，还能帮你总结和串联</li></ul><h4 id="4-技术文档查询"><a href="#4-技术文档查询" class="headerlink" title="4. 技术文档查询"></a><strong>4. 技术文档查询</strong></h4><ul><li><strong>场景</strong>：程序员需要查阅大量的 API 文档、技术手册</li><li><strong>痛点</strong>：文档更新频繁，搜索功能不够智能</li><li><strong>解决</strong>：构建技术文档 RAG 系统，快速找到最新、最准确的技术信息</li></ul><hr><h3 id="总结：RAG-让知识触手可及"><a href="#总结：RAG-让知识触手可及" class="headerlink" title="总结：RAG 让知识触手可及"></a><strong>总结：RAG 让知识触手可及</strong></h3><p>一个小小的 RAG 系统，背后整合了文本理解、向量检索、智能生成等多项 AI 技术。它不只是个技术 demo，更是让知识真正为我们服务的工具。</p><p><strong>RAG 的核心价值：</strong></p><ol><li><strong>降低信息获取成本</strong>：从”找资料”变成”问问题”</li><li><strong>提升知识利用效率</strong>：让沉睡的文档变成活跃的知识库</li><li><strong>增强决策支持能力</strong>：基于准确信息做出更好的决策</li><li><strong>构建个人知识体系</strong>：让碎片化信息变成结构化知识</li></ol><p>技术在进步，但最终目的都是让我们的工作和学习更高效。RAG 就是这样一个实用的工具，它让我们与知识的距离更近了一步。</p><p>想要体验 RAG 的魅力？不妨从这个 <a href="https://github.com/zhengchalei/rag-demo">rag-demo</a> 项目开始，搭建属于你自己的智能知识库吧！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>LLM</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后悔药时间到！Google那个“撤销”按钮，背后的秘密和小心思</title>
    <link href="/2025/07/09/%E5%90%8E%E6%82%94%E8%8D%AF%E6%97%B6%E9%97%B4%E5%88%B0%EF%BC%81Google%E9%82%A3%E4%B8%AA%E2%80%9C%E6%92%A4%E9%94%80%E2%80%9D%E6%8C%89%E9%92%AE%EF%BC%8C%E8%83%8C%E5%90%8E%E7%9A%84%E7%A7%98%E5%AF%86%E5%92%8C%E5%B0%8F%E5%BF%83%E6%80%9D/"/>
    <url>/2025/07/09/%E5%90%8E%E6%82%94%E8%8D%AF%E6%97%B6%E9%97%B4%E5%88%B0%EF%BC%81Google%E9%82%A3%E4%B8%AA%E2%80%9C%E6%92%A4%E9%94%80%E2%80%9D%E6%8C%89%E9%92%AE%EF%BC%8C%E8%83%8C%E5%90%8E%E7%9A%84%E7%A7%98%E5%AF%86%E5%92%8C%E5%B0%8F%E5%BF%83%E6%80%9D/</url>
    
    <content type="html"><![CDATA[<p>各位同学，有没有被 Google 产品里的“撤销”按钮拯救过？比如 Gmail 发错邮件，Google Drive 误删文件…… 手一抖，心一慌，还好有它！</p><p>这小小的“后悔药”，背后可没那么简单。它不是魔法，是精妙的设计！今天咱们就用大白话，揭秘它怎么实现，以及 Google 为啥要费这劲。</p><hr><h3 id="“撤销”按钮的几种常见套路"><a href="#“撤销”按钮的几种常见套路" class="headerlink" title="“撤销”按钮的几种常见套路"></a><strong>“撤销”按钮的几种常见套路</strong></h3><p>Google 的“撤销”功能，不是一个套路打天下，它会根据不同的操作，使出不同的招数：</p><h4 id="1-稍等片刻，再执行（最差！）"><a href="#1-稍等片刻，再执行（最差！）" class="headerlink" title="1. 稍等片刻，再执行（最差！）"></a><strong>1. 稍等片刻，再执行（最差！）</strong></h4><ul><li><strong>咋实现？</strong> 你点了操作（比如“发送”），但你的设备会<strong>先按住这条指令几秒钟</strong>。如果这几秒内你点“撤销”，指令直接取消，服务器根本没收到。不点？几秒后才真正发出去。</li><li><strong>例子：</strong> Gmail 的“撤销发送”。</li><li><strong>思考：</strong> 适合有短暂延迟也无妨的操作。性能开销最小，因为很多时候操作根本没发生。</li></ul><p>这里的弊端是, 用户可能点击发送后, 立马关闭了软件&#x2F;网页, 导致结果不会执行. </p><h4 id="2-立刻执行，但能回滚（实现最简单-场景受限！）"><a href="#2-立刻执行，但能回滚（实现最简单-场景受限！）" class="headerlink" title="2. 立刻执行，但能回滚（实现最简单,场景受限！）"></a><strong>2. 立刻执行，但能回滚（实现最简单,场景受限！）</strong></h4><ul><li><strong>咋实现？</strong> 你一操作（比如“删除”），服务器<strong>立刻就执行了</strong>。但它会偷偷留个“底”（比如移到回收站，或存个旧版本）。你点“撤销”？服务器就把这个“底”再恢复回去。</li><li><strong>例子：</strong> Google Drive&#x2F;Photos 删除（进回收站）、Google Docs&#x2F;Sheets 的版本历史。</li><li><strong>思考：</strong> 适合需要即时反馈，但操作可逆的功能。</li></ul><p>这里需要部分可逆的操作, 如果某些操作会有副作用, 这里很显然是一个坏主意.</p><h4 id="3-乐观预判，后台跟进（最理想！）"><a href="#3-乐观预判，后台跟进（最理想！）" class="headerlink" title="3. 乐观预判，后台跟进（最理想！）"></a><strong>3. 乐观预判，后台跟进（最理想！）</strong></h4><ul><li><strong>咋实现？</strong> 你点了操作（比如“点赞”），你的屏幕会<strong>立刻更新</strong>（赞数加一），给你一种成功了的“错觉”。同时，请求在后台悄悄发给服务器。如果服务器还没确认你就点“撤销”，前端就取消掉并恢复原样。</li><li><strong>例子：</strong> 社交媒体的点赞、收藏。</li><li><strong>思考：</strong> 追求极致速度，让用户感觉“嗖”地一下就完成了。</li></ul><p>这部分实现起来困难一些, 任务发送给后端的执行队列, 在一定时间内用户未取消在执行, 这部分实现起来较复杂, 但是受影响的区域是最小的, 这里也会出现一些其他的问题, 例如 执行前置检查需要做好, 如果队列执行报错, 客户是收不到的, 这里一定要提前准备好.</p><hr><h3 id="Google-为啥要费劲做它？"><a href="#Google-为啥要费劲做它？" class="headerlink" title="Google 为啥要费劲做它？"></a><strong>Google 为啥要费劲做它？</strong></h3><p>这不只是个技术活，更是产品和商业的考量：</p><ol><li><strong>用户安心</strong>：手抖党福音！不怕点错，大大降低了操作焦虑，让用户敢于大胆使用产品。</li><li><strong>数据安全</strong>：防误删、防误改，避免用户因失误导致数据丢失的心力交瘁，这太重要了！</li><li><strong>减少成本</strong>：用户自己就能“救命”，客服来电自然就少了，省钱省力。</li><li><strong>用户粘性</strong>：这种贴心细节，让用户觉得产品懂你、好用，自然更愿意用，形成依赖。</li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>一个小小的“撤销”按钮，背后藏着多套技术方案，更体现了 Google 对用户体验的极致追求。它不光解决了实际问题，更构建了用户对产品的信任感。</p>]]></content>
    
    
    
    <tags>
      
      <tag>用户体验</tag>
      
      <tag>产品设计</tag>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 配置 MySQL SSL 连接</title>
    <link href="/2025/06/12/Spring-Boot-Mysql-SSL/"/>
    <url>/2025/06/12/Spring-Boot-Mysql-SSL/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-SSL-连接配置指南"><a href="#MySQL-SSL-连接配置指南" class="headerlink" title="MySQL SSL 连接配置指南"></a>MySQL SSL 连接配置指南</h1><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>在 application.properties 中添加：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 证书路径和密码配置</span><br><span class="hljs-attr">ssl.file-path</span>=<span class="hljs-string">C:/ssl/certs</span><br><span class="hljs-attr">ssl.ca-password</span>=<span class="hljs-string">yourpassword123</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 数据库连接配置</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/dbname?\</span><br><span class="hljs-string">  sslMode=REQUIRED\</span><br><span class="hljs-string">  &amp;trustCertificateKeyStoreUrl=file:$&#123;ssl.file-path&#125;/ApsaraDB-CA-Chain.jks\</span><br><span class="hljs-string">  &amp;trustCertificateKeyStorePassword=$&#123;ssl.ca-password&#125;\</span><br><span class="hljs-string">  &amp;trustCertificateKeyStoreType=JKS</span><br><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">dbuser</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">dbpassword</span><br></code></pre></td></tr></table></figure><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><ol><li><p><strong>sslMode</strong>：</p><ul><li>REQUIRED：强制SSL加密</li><li>VERIFY_CA：验证CA证书</li><li>VERIFY_IDENTITY：完全验证（最安全）</li></ul></li><li><p><strong>证书文件</strong>：</p><ul><li>阿里云RDS默认提供ApsaraDB-CA-Chain.jks</li><li>默认密码为”apsaradb”，建议修改</li></ul></li><li><p><strong>文件路径</strong>：</p><ul><li>使用绝对路径</li><li>确保应用有读取权限</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
      <tag>MySQL</tag>
      
      <tag>SSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cursor的使用技巧</title>
    <link href="/2025/04/21/Cursor%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <url>/2025/04/21/Cursor%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>先拿 Deepseek 之类的模型把需求和流程捋出来。</li><li>把项目结构使用 Cursor 先分析出来， 写道 README.md 中。</li><li>Rule 是用来描述项目边界和限制的， 例如使用的框架，UI 设计， 编码习惯， 注释习惯。</li><li>每次提问前 一定要加上 @Rule + @README.md ， 不然他容易忽略。</li></ol><h2 id="他人经验"><a href="#他人经验" class="headerlink" title="他人经验"></a>他人经验</h2><p>1.使用时间选择：晚上九点左右 AI 最难用，尽量选择其他时间；后半夜和早上上午效果较好。<br>2.沟通优先级：第一句话先明确告知需求 —— 不要直接修改代码，而是先阐述方案。<br>3.方案确认流程：看到方案后，再根据你的理解进一步调整方案。<br>4.多任务处理：同时创建多个文件夹、打开多个 Cursor ，让其并行处理项目，对比效果后选择最优方向。<br>5.额度顾虑说明：无需担心额度消耗，即使 500 额度用尽，仍有慢速额度可用（但效果与快速额度一样差）。<br>6.语音输入方案：通过手机语音输入法配合电脑 AHK 插件，实现手机语音录入需求，电脑端自动发送至 Cursor 。<br>7.代码生成等待：等待 AI 生成代码时可灵活处理其他事务（如 “在地上转圈”，比喻无需死守界面）。<br>8.结果校验：每次生成代码后，用 Cursor 中的 Google 模型进行检查。<br>9.模式选择建议：Agent 模式未必好用，普通模式有时更快捷，可灵活切换。<br>10.语音输入优势：借助第六条的语音输入功能，可像与朋友聊天一样自然表达需求，添加 “废话” 能帮助 AI 更精准理解意图。<br>11.重复额度提醒：再次强调无需担心额度用尽（重复第五条），过度顾虑可能导致 AI 生成质量下降，保持平常心。<br>12.Cursor 核心功能：Cursor 的 “fast” 和 “small” 模式是其特色，可快速向 AI 投喂当前项目的代码依赖关系和内容，使其理解并执行 IDE 操作（如询问某行代码位置，AI 可直接定位）。<br>13.大纲协作法：与常规建议一致，先将 AI 内容的大纲写入文件，并确保 AI 始终能访问该文件，便于上下文理解。</p><p><a href="https://www.v2ex.com/t/1126870#reply35">源于dreamkuo</a></p><h2 id="部分-Rule-参考"><a href="#部分-Rule-参考" class="headerlink" title="部分 Rule 参考"></a>部分 Rule 参考</h2><h3 id="Fluter"><a href="#Fluter" class="headerlink" title="Fluter"></a>Fluter</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs markdown">您是一名高级 Dart 程序员，具有 Flutter 框架的经验，并偏好干净的编程和设计模式。<br><br>生成符合基本原则和命名规范的代码、修正和重构。<br><br><span class="hljs-section">## 项目结构</span><br><br>采用GetX框架进行状态管理和路由导航。<br><br><span class="hljs-section">### 入口文件</span><br><br>主要入口点是@lib/main.dart，它初始化应用，配置主题，设置路由并启动应用。<br><br><span class="hljs-section">### 项目结构</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-strong">**lib/app/modules/**</span> - 包含所有功能模块，每个模块都遵循GetX模式<br><span class="hljs-bullet">  -</span> 每个模块包含自己的控制器、视图和绑定<br><span class="hljs-bullet">  -</span> 例如：登录模块@lib/app/modules/login<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**lib/app/routes/**</span> - 包含路由配置<br><span class="hljs-bullet">  -</span> @app<span class="hljs-emphasis">_routes.dart - 定义路由常量</span><br><span class="hljs-emphasis">  - @app_</span>pages.dart - 定义应用页面路由配置<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**lib/app/services/**</span> - 包含应用服务，例如HTTP请求、存储服务等<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**lib/app/data/**</span> - 数据模型和数据源<br><span class="hljs-bullet">-</span> <span class="hljs-strong">**lib/app/utils/**</span> - 通用工具类和辅助函数<br><br><span class="hljs-section">### 基本原则</span><br><br><span class="hljs-bullet">-</span> 所有代码和文档使用中文。<br><span class="hljs-bullet">-</span> 始终声明每个变量和函数的类型（参数和返回值）。<br><span class="hljs-bullet">  -</span> 避免使用任何类型（any）。<br><span class="hljs-bullet">  -</span> 创建必要的类型。<br><span class="hljs-bullet">-</span> 不要在函数内部留空行。<br><span class="hljs-bullet">-</span> 每个文件只导出一个。<br><br><span class="hljs-section">### 命名规范</span><br><br><span class="hljs-bullet">-</span> 类使用 PascalCase。<br><span class="hljs-bullet">-</span> 变量、函数和方法使用 camelCase。<br><span class="hljs-bullet">-</span> 文件和目录名称使用 underscores<span class="hljs-emphasis">_case。</span><br><span class="hljs-emphasis">- 环境变量使用 UPPERCASE。</span><br><span class="hljs-emphasis">  - 避免魔法数字，定义常量。</span><br><span class="hljs-emphasis">- 每个函数以动词开头。</span><br><span class="hljs-emphasis">- 布尔变量使用动词，例如：isLoading、hasError、canDelete 等。</span><br><span class="hljs-emphasis">- 使用完整单词而非缩写，并确保拼写正确。</span><br><span class="hljs-emphasis">  - 除了标准缩写，如 API、URL 等。</span><br><span class="hljs-emphasis">  - 除了众所周知的缩写：</span><br><span class="hljs-emphasis">    - i、j 用于循环</span><br><span class="hljs-emphasis">    - err 用于错误</span><br><span class="hljs-emphasis">    - ctx 用于上下文</span><br><span class="hljs-emphasis">    - req、res、next 用于中间件函数参数</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### 函数</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 在此上下文中，函数的定义同样适用于方法。</span><br><span class="hljs-emphasis">- 编写短小的函数，功能单一。指令数少于 20 条。</span><br><span class="hljs-emphasis">- 用动词和其他内容命名函数。</span><br><span class="hljs-emphasis">  - 如果返回布尔值，使用 isX 或 hasX、canX 等。</span><br><span class="hljs-emphasis">  - 如果不返回任何内容，使用 executeX 或 saveX 等。</span><br><span class="hljs-emphasis">- 避免嵌套块：</span><br><span class="hljs-emphasis">  - 提前检查并返回。</span><br><span class="hljs-emphasis">  - 提取到工具函数中。</span><br><span class="hljs-emphasis">- 使用高阶函数（map、filter、reduce 等）来避免函数嵌套。</span><br><span class="hljs-emphasis">  - 对于简单函数（少于 3 条指令）使用箭头函数。</span><br><span class="hljs-emphasis">  - 对于非简单函数使用具名函数。</span><br><span class="hljs-emphasis">- 使用默认参数值，而不是检查 null 或 undefined。</span><br><span class="hljs-emphasis">- 通过 RO-RO 减少函数参数：</span><br><span class="hljs-emphasis">  - 使用对象传递多个参数。</span><br><span class="hljs-emphasis">  - 使用对象返回结果。</span><br><span class="hljs-emphasis">  - 为输入参数和输出声明必要的类型。</span><br><span class="hljs-emphasis">- 使用单一的抽象级别。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### 数据</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 不要滥用原始类型，将数据封装在复合类型中。</span><br><span class="hljs-emphasis">- 避免在函数中进行数据验证，使用具有内部验证的类。</span><br><span class="hljs-emphasis">- 优先使用不可变数据。</span><br><span class="hljs-emphasis">  - 对于不变的数据使用 readonly。</span><br><span class="hljs-emphasis">  - 对于不变的字面量使用 const。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### 类</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 遵循 SOLID 原则。</span><br><span class="hljs-emphasis">- 优先使用组合而非继承。</span><br><span class="hljs-emphasis">- 声明接口以定义契约。</span><br><span class="hljs-emphasis">- 编写小型类，功能单一。</span><br><span class="hljs-emphasis">  - 指令数少于 200。</span><br><span class="hljs-emphasis">  - 公共方法少于 10 个0 个。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### 异常</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 使用异常处理您不期望的错误。</span><br><span class="hljs-emphasis">- 如果捕获异常，应该是为了：</span><br><span class="hljs-emphasis">  - 修复预期的问题。</span><br><span class="hljs-emphasis">  - 添加上下文。</span><br><span class="hljs-emphasis">  - 否则，使用全局处理程序。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">## 特定于 Flutter</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### 基本原则</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 使用干净的架构。</span><br><span class="hljs-emphasis">  - 如果需要将代码组织为模块，请参见模块。</span><br><span class="hljs-emphasis">  - 如果需要将代码组织为控制器，请参见控制器。</span><br><span class="hljs-emphasis">  - 如果需要将代码组织为服务，请参见服务。</span><br><span class="hljs-emphasis">  - 如果需要将代码组织为存储库，请参见存储库。</span><br><span class="hljs-emphasis">  - 如果需要将代码组织为实体，请参见实体。</span><br><span class="hljs-emphasis">- 使用存储库模式进行数据持久化。</span><br><span class="hljs-emphasis">  - 如果需要缓存数据，请参见缓存。</span><br><span class="hljs-emphasis">- 使用控制器模式与 GetX 处理业务逻辑。</span><br><span class="hljs-emphasis">- 使用 GetX 管理状态。</span><br><span class="hljs-emphasis">  - 如果需要保持状态，请参见 keepAlive。</span><br><span class="hljs-emphasis">- 使用 GetX 管理 UI 状态。</span><br><span class="hljs-emphasis">- 控制器始终接受方法作为输入，并更新影响 UI 的 UI 状态。</span><br><span class="hljs-emphasis">- 使用扩展管理可重用代码。</span><br><span class="hljs-emphasis">- 使用 ThemeData 管理主题。</span><br><span class="hljs-emphasis">- 使用 AppLocalizations 管理翻译。</span><br><span class="hljs-emphasis">- 使用常量管理常量值。</span><br><span class="hljs-emphasis">- 当小部件树变得过深时，可能导致更长的构建时间和更高的内存使用。Flutter 需要遍历整个树来呈现 UI，因此更平坦的结构提高了效率。</span><br><span class="hljs-emphasis">- 更平坦的小部件结构使理解和修改代码更容易。可重用组件也促进了更好的代码组织。</span><br><span class="hljs-emphasis">- 避免在 Flutter 中深度嵌套小部件。深度嵌套的小部件可能会对 Flutter 应用的可读性、可维护性和性能产生负面影响。旨在将复杂的小部件树拆分为更小的可重用组件。这不仅使您的代码更清晰，还通过减少构建复杂性来增强性能。</span><br><span class="hljs-emphasis">- 深度嵌套的小部件可能使状态管理变得更加困难。通过保持树的扁平化，更容易管理状态并在小部件之间传递数据。</span><br><span class="hljs-emphasis">- 将大型小部件拆分为更小、更专注的小部件。</span><br><span class="hljs-emphasis">- 尽可能使用 const 构造函数以减少重建次数。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### 性能优化</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 在可能的情况下使用 const 组件以优化重建。</span><br><span class="hljs-emphasis">- 实现列表视图优化（例如：ListView.builder）。</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">### UI 和样式</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 遵循iOS 18风格的现代化设计，保持简洁、直观的用户界面</span><br><span class="hljs-emphasis">  - 使用大标题和充足的留白营造清晰的视觉层次</span><br><span class="hljs-emphasis">  - 采用圆角设计（边框半径通常为10-12px）</span><br><span class="hljs-emphasis">  - 实现半透明效果和模糊背景（使用BackdropFilter组件）</span><br><span class="hljs-emphasis">  - 简约的图标设计和精简的视觉元素</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 色彩系统</span><br><span class="hljs-emphasis">  - 主色：使用@main.dart中定义的颜色常量</span><br><span class="hljs-emphasis">  - 亮色模式下使用明亮、干净的背景色（浅灰色或白色）</span><br><span class="hljs-emphasis">  - 暗色模式下使用纯黑或深灰色背景，减少眼睛疲劳</span><br><span class="hljs-emphasis">  - 使用语义化颜色：成功(绿)、警告(黄)、错误(红)、信息(蓝)</span><br><span class="hljs-emphasis">  - 避免使用过多颜色，保持整体风格一致</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 字体和排版</span><br><span class="hljs-emphasis">  - 使用系统默认字体（SF Pro 或平台对应字体）</span><br><span class="hljs-emphasis">  - 标题使用较大字号和semibold粗细（fontSize: 20-24, fontWeight: FontWeight.w600）</span><br><span class="hljs-emphasis">  - 正文使用舒适阅读字号（fontSize: 16）</span><br><span class="hljs-emphasis">  - 次要信息使用较小字号（fontSize: 14）</span><br><span class="hljs-emphasis">  - 保持良好的行间距（height: 1.2-1.5）</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 组件设计</span><br><span class="hljs-emphasis">  - 按钮：使用填充式按钮为主操作，文本按钮为次要操作</span><br><span class="hljs-emphasis">  - 表单：输入框使用填充背景而非边框描边</span><br><span class="hljs-emphasis">  - 卡片：轻度投影和适当圆角，内容留有充足内边距</span><br><span class="hljs-emphasis">  - 列表：条目之间使用分隔线或适当间距区分</span><br><span class="hljs-emphasis">  - 对话框：居中显示，带有明显的取消和确认操作</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 交互设计</span><br><span class="hljs-emphasis">  - 实现流畅的过渡动画（页面切换、列表滑动）</span><br><span class="hljs-emphasis">  - 添加微妙的反馈动画（按钮按下状态、加载指示器）</span><br><span class="hljs-emphasis">  - 使用Hero动画实现共享元素转场</span><br><span class="hljs-emphasis">  - 加载状态使用进度指示器而非静态界面</span><br><span class="hljs-emphasis">  - 表单验证提供即时反馈</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 响应式布局</span><br><span class="hljs-emphasis">  - 使用MediaQuery或LayoutBuilder根据屏幕尺寸调整UI</span><br><span class="hljs-emphasis">  - 针对横竖屏方向提供不同布局</span><br><span class="hljs-emphasis">  - 使用Flexible和Expanded组件创建自适应布局</span><br><span class="hljs-emphasis">  - 避免硬编码尺寸，使用相对尺寸（如屏幕百分比）</span><br><span class="hljs-emphasis">  - 确保所有交互元素尺寸足够大（至少48x48px），便于触控</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">- 可访问性</span><br><span class="hljs-emphasis">  - 确保文本与背景的对比度足够高</span><br><span class="hljs-emphasis">  - 为图片和图标提供语义标签</span><br><span class="hljs-emphasis">  - 支持系统字体大小调整</span><br><span class="hljs-emphasis">  - 交互元素需要有明确的焦点状态</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Cursor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JetBrains使用ja-netfilter</title>
    <link href="/2025/04/03/JetBrains%20%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%20ja-netfilter%20%E6%BF%80%E6%B4%BB%E6%8C%87%E5%8D%97/"/>
    <url>/2025/04/03/JetBrains%20%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%20ja-netfilter%20%E6%BF%80%E6%B4%BB%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="JetBrains-产品使用-ja-netfilter-激活指南"><a href="#JetBrains-产品使用-ja-netfilter-激活指南" class="headerlink" title="JetBrains 产品使用 ja-netfilter 激活指南"></a>JetBrains 产品使用 ja-netfilter 激活指南</h1><h2 id="下载-ja-netfilter"><a href="#下载-ja-netfilter" class="headerlink" title="下载 ja-netfilter"></a>下载 ja-netfilter</h2><ol><li>访问镜像站点 <a href="https://3.jetbra.in/">https://3.jetbra.in/</a></li><li>选择一个可用节点，例如：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//i</span>pfs.io<span class="hljs-regexp">/ipfs/</span>bafybeih65no5dklpqfe346wyeiak6wzemv5d7z2ya7nssdgwdz4xrmdu6i/<br></code></pre></td></tr></table></figure></li></ol><p><img src="/../img/ipfs.iobafybeih65no5dklpqfe346wyeiak6wzemv5d7z2ya7nssdgwdz4xrmdu6i.png" alt="下载节点示例"></p><h2 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h2><h3 id="更新-url-conf-文件"><a href="#更新-url-conf-文件" class="headerlink" title="更新 url.conf 文件"></a>更新 url.conf 文件</h3><p>将以下内容添加到 <code>url.conf</code> 文件中：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">[URL]<br>PREFIX,https:<span class="hljs-regexp">//</span>account.jetbrains.com<span class="hljs-regexp">/lservice/</span>rpc/validateKey.action<br>PREFIX,https:<span class="hljs-regexp">//</span>account.jetbrains.com.cn<span class="hljs-regexp">/lservice/</span>rpc/validateKey.action<br></code></pre></td></tr></table></figure><h2 id="安装与激活步骤"><a href="#安装与激活步骤" class="headerlink" title="安装与激活步骤"></a>安装与激活步骤</h2><ol><li><p>运行安装脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh install.sh<br></code></pre></td></tr></table></figure></li><li><p>启动 JetBrains IDE</p></li><li><p>选择”激活码激活”方式，输入任意激活码即可完成激活</p></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>建议使用前关闭杀毒软件，避免误报</li><li>某些网络环境下可能需要配置代理</li><li>本方法仅供学习研究使用，请支持正版软件</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JetBrains</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows下WSL正确的打开方式</title>
    <link href="/2024/09/21/Windows%E4%B8%8BWSL%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/09/21/Windows%E4%B8%8BWSL%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol><li>打开应用商店， 安装 WSL 子系统， 我安装的是 Debian</li><li>安装 Runtime， 例如 curl, zip, unzip, git</li></ol><blockquote><p>安装 SDKMan, <code>curl -s &quot;https://get.sdkman.io&quot; | bash</code></p></blockquote><h2 id="使用-SDKMan-安装开发环境"><a href="#使用-SDKMan-安装开发环境" class="headerlink" title="使用 SDKMan 安装开发环境"></a>使用 SDKMan 安装开发环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sdk install java 21.0.2-graalce<br>sdk install gradle<br>sdk install maven<br>sudo apt install nodejs npm -y<br></code></pre></td></tr></table></figure><h2 id="Idea-配置"><a href="#Idea-配置" class="headerlink" title="Idea 配置"></a>Idea 配置</h2><ol><li>在项目设置用， 使用WSL的JDK</li><li>使用WSL中的Gradle&#x2F;Maven</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jimmer-Postgresql-存储文件</title>
    <link href="/2024/08/30/Jimmer-Postgresql-%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6/"/>
    <url>/2024/08/30/Jimmer-Postgresql-%E5%AD%98%E5%82%A8%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> public.sys_file<br>(<br>    id            <span class="hljs-type">bigint</span> generated <span class="hljs-keyword">by</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">identity</span> <span class="hljs-keyword">primary key</span>,<br>    uid           <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not null</span>,<br>    original_name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not null</span>,<br>    type          <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not null</span>,<br>    file_data     text[] <span class="hljs-keyword">not null</span>,<br>);<br><br></code></pre></td></tr></table></figure><h2 id="类型转换器"><a href="#类型转换器" class="headerlink" title="类型转换器"></a>类型转换器</h2><p>这里直接使用 ByteArray 会出现一些稀奇古怪的错误, 例如类型为 Text[]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = <span class="hljs-string">&quot;sys_file&quot;</span>)</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">DataBaseFile</span> : <span class="hljs-type">TenantAware</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Long</span><br><br>    <span class="hljs-keyword">val</span> uid: String<br><br>    <span class="hljs-keyword">val</span> originalName: String<br><br>    <span class="hljs-keyword">val</span> type: FileType<br><br>    <span class="hljs-keyword">val</span> fileData: InputStream<br>&#125;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FileScalarProvider</span> : <span class="hljs-type">ScalarProvider</span>&lt;<span class="hljs-type">InputStream, ByteArray</span>&gt; &#123;<br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toScalar</span><span class="hljs-params">(sqlValue: <span class="hljs-type">ByteArray</span>)</span></span>: InputStream &#123;<br><span class="hljs-keyword">val</span> decompress = FileZipUtils.decompress(sqlValue)<br><span class="hljs-keyword">return</span> ByteArrayInputStream(decompress)<br>&#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toSql</span><span class="hljs-params">(scalarValue: <span class="hljs-type">InputStream</span>)</span></span>: ByteArray &#123;<br>        <span class="hljs-keyword">val</span> compress = FileZipUtils.compress(scalarValue.readAllBytes())<br>        <span class="hljs-keyword">return</span> compress<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@ConditionalOnProperty(prefix = <span class="hljs-string">&quot;file&quot;</span>, name = [<span class="hljs-string">&quot;storage&quot;</span>], havingValue = <span class="hljs-string">&quot;database&quot;</span>)</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataBaseFileService</span>(<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> dataBaseFileRepository: DataBaseFileRepository,<br>) : FileService &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 上传图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> [multipartFile] 文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> [String]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">uploadFile</span><span class="hljs-params">(multipartFile: <span class="hljs-type">MultipartFile</span>)</span></span>: String &#123;<br>        <span class="hljs-keyword">if</span> (multipartFile.size &gt; <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">val</span> baseFile =<br>                new(DataBaseFile::<span class="hljs-keyword">class</span>).<span class="hljs-keyword">by</span> &#123;<br>                    <span class="hljs-keyword">this</span>.uid = UUID.randomUUID().toString()<br>                    <span class="hljs-keyword">this</span>.originalName = multipartFile.originalFilename ?: UUID.randomUUID().toString()<br>                    <span class="hljs-keyword">this</span>.type = getFileType(multipartFile)<br>                    <span class="hljs-keyword">this</span>.fileData = ByteArrayInputStream(multipartFile.bytes)<br>                &#125;<br>            dataBaseFileRepository.insert(baseFile)<br>            <span class="hljs-keyword">return</span> baseFile.uid<br>        &#125;<br>        <span class="hljs-keyword">throw</span> EmptyFileException(<span class="hljs-string">&quot;文件不能为空&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> [fileName]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> [Pair&lt;String, ByteArray&gt;]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getFile</span><span class="hljs-params">(fileName: <span class="hljs-type">String</span>)</span></span>: Pair&lt;String, ByteArrayInputStream&gt; &#123;<br>        <span class="hljs-keyword">val</span> dataBaseFile = dataBaseFileRepository.findByUid(fileName)<br>        <span class="hljs-keyword">return</span> dataBaseFile.originalName to ByteArrayInputStream(dataBaseFile.fileData.readAllBytes())<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">object</span> FileZipUtils &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> BITE_SIZE: <span class="hljs-built_in">Int</span> = <span class="hljs-number">4</span> * <span class="hljs-number">1024</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">compress</span><span class="hljs-params">(<span class="hljs-keyword">data</span>: <span class="hljs-type">ByteArray</span>)</span></span>: ByteArray &#123;<br>        <span class="hljs-keyword">val</span> deflater = Deflater()<br>        deflater.setLevel(Deflater.BEST_COMPRESSION)<br>        deflater.setInput(<span class="hljs-keyword">data</span>)<br>        deflater.finish()<br>        <span class="hljs-keyword">val</span> outputStream = ByteArrayOutputStream(<span class="hljs-keyword">data</span>.size)<br>        <span class="hljs-keyword">val</span> tmp = ByteArray(BITE_SIZE)<br><br>        <span class="hljs-keyword">while</span> (!deflater.finished()) &#123;<br>            <span class="hljs-keyword">val</span> size = deflater.deflate(tmp)<br>            outputStream.write(tmp, <span class="hljs-number">0</span>, size)<br>        &#125;<br><br>        outputStream.close()<br><br>        <span class="hljs-keyword">return</span> outputStream.toByteArray()<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">decompress</span><span class="hljs-params">(<span class="hljs-keyword">data</span>: <span class="hljs-type">ByteArray</span>)</span></span>: ByteArray &#123;<br>        <span class="hljs-keyword">val</span> inflater = Inflater()<br>        inflater.setInput(<span class="hljs-keyword">data</span>)<br>        <span class="hljs-keyword">val</span> outputStream = ByteArrayOutputStream(<span class="hljs-keyword">data</span>.size)<br>        <span class="hljs-keyword">val</span> tmp = ByteArray(BITE_SIZE)<br><br>        <span class="hljs-keyword">while</span> (!inflater.finished()) &#123;<br>            <span class="hljs-keyword">val</span> count = inflater.inflate(tmp)<br>            outputStream.write(tmp, <span class="hljs-number">0</span>, count)<br>        &#125;<br><br>        outputStream.close()<br><br>        <span class="hljs-keyword">return</span> outputStream.toByteArray()<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上传文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> [file] 文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> [R&lt;String&gt;]</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(path = [<span class="hljs-string">&quot;/upload/file&quot;</span>], consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">uploadFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@RequestParam(<span class="hljs-string">&quot;file&quot;</span>)</span> file: <span class="hljs-type">MultipartFile</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>: R&lt;String&gt; &#123;<br>    <span class="hljs-keyword">val</span> uploadImage = <span class="hljs-keyword">this</span>.fileService.uploadFile(file)<br>    <span class="hljs-keyword">return</span> R.success(<span class="hljs-keyword">data</span> = uploadImage)<br>&#125;<br><br><span class="hljs-comment">// 下载文件</span><br><br><span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/download/file&quot;</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">downloadFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@RequestParam(name = <span class="hljs-string">&quot;uid&quot;</span>)</span> uid: <span class="hljs-type">String</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    request: <span class="hljs-type">HttpServletRequest</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    response: <span class="hljs-type">HttpServletResponse</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> <span class="hljs-keyword">data</span> = <span class="hljs-keyword">this</span>.fileService.getFile(uid)<br>    writeFileToResponse(<span class="hljs-keyword">data</span>.first, <span class="hljs-keyword">data</span>.second, request, response)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">writeFileToResponse</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    fileName: <span class="hljs-type">String</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    stream: <span class="hljs-type">InputStream</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    request: <span class="hljs-type">HttpServletRequest</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    response: <span class="hljs-type">HttpServletResponse</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> readAllBytes = stream.readAllBytes()<br>    <span class="hljs-comment">// 设置响应头</span><br>    response.contentType = <span class="hljs-string">&quot;application/octet-stream&quot;</span><br>    response.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment; filename=\&quot;<span class="hljs-variable">$fileName</span>\&quot;&quot;</span>)<br>    response.setContentLength(readAllBytes.size)<br>    <span class="hljs-comment">// 获取 ServletOutputStream 对象</span><br>    <span class="hljs-keyword">val</span> servletOutputStream: OutputStream = response.outputStream<br>    <span class="hljs-comment">// 直接写入数据</span><br>    servletOutputStream.write(readAllBytes)<br>    servletOutputStream.flush()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Jimmer</tag>
      
      <tag>Postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Boot-Jackson-Time-Formater</title>
    <link href="/2024/08/22/Spring-Boot-Jackson-Time-Formater/"/>
    <url>/2024/08/22/Spring-Boot-Jackson-Time-Formater/</url>
    
    <content type="html"><![CDATA[<h1 id="配置一下日期格式化-留一个备忘录"><a href="#配置一下日期格式化-留一个备忘录" class="headerlink" title="配置一下日期格式化, 留一个备忘录"></a>配置一下日期格式化, 留一个备忘录</h1><p>以下为 Kotlin 版本, Java版本修改一样, 自行修改即可</p><h2 id="Date-类型"><a href="#Date-类型" class="headerlink" title="Date 类型"></a>Date 类型</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.jackson.default-property-inclusion</span>=<span class="hljs-string">non_null</span><br><span class="hljs-attr">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-attr">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br></code></pre></td></tr></table></figure><h2 id="Java8-LocalTime-LocalDate-LocalDateTime-类型"><a href="#Java8-LocalTime-LocalDate-LocalDateTime-类型" class="headerlink" title="Java8 LocalTime, LocalDate, LocalDateTime 类型"></a>Java8 LocalTime, LocalDate, LocalDateTime 类型</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> dateFormatter = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> timeFormatter = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>)<br><br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">jackson2ObjectMapperBuilderCustomizer</span><span class="hljs-params">()</span></span>: Jackson2ObjectMapperBuilderCustomizer &#123;<br>    <span class="hljs-keyword">return</span> Jackson2ObjectMapperBuilderCustomizer &#123; builder -&gt;<br>        <span class="hljs-comment">// LocalTime</span><br>        builder.serializerByType(LocalTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeSerializer(timeFormatter))<br>        builder.deserializerByType(LocalTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeDeserializer(timeFormatter))<br><br>        <span class="hljs-comment">// LocalDate</span><br>        builder.serializerByType(LocalDateTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeSerializer(dateTimeFormatter))<br>        builder.deserializerByType(LocalDateTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeDeserializer(dateTimeFormatter))<br><br>        <span class="hljs-comment">// LocalDateTime</span><br>        builder.serializerByType(LocalDateTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeSerializer(dateTimeFormatter))<br>        builder.deserializerByType(LocalDateTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeDeserializer(dateTimeFormatter))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Get查询参数"><a href="#Get查询参数" class="headerlink" title="Get查询参数"></a>Get查询参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">localDateTimeFormatter</span><span class="hljs-params">()</span></span>: Formatter&lt;LocalDateTime&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">object</span> : Formatter&lt;LocalDateTime&gt; &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parse</span><span class="hljs-params">(text: <span class="hljs-type">String</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: LocalDateTime &#123;<br>            <span class="hljs-keyword">return</span> LocalDateTime.parse(text, dateTimeFormatter)<br>        &#125;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">print</span><span class="hljs-params">(t: <span class="hljs-type">LocalDateTime</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: String &#123;<br>            <span class="hljs-keyword">return</span> t.format(dateTimeFormatter)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">localDateFormatter</span><span class="hljs-params">()</span></span>: Formatter&lt;LocalDate&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">object</span> : Formatter&lt;LocalDate&gt; &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parse</span><span class="hljs-params">(text: <span class="hljs-type">String</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: LocalDate &#123;<br>            <span class="hljs-keyword">return</span> LocalDate.parse(text, dateFormatter)<br>        &#125;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">print</span><span class="hljs-params">(t: <span class="hljs-type">LocalDate</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: String &#123;<br>            <span class="hljs-keyword">return</span> t.format(dateFormatter)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">localTimeFormatter</span><span class="hljs-params">()</span></span>: Formatter&lt;LocalTime&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">object</span> : Formatter&lt;LocalTime&gt; &#123;<br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parse</span><span class="hljs-params">(text: <span class="hljs-type">String</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: LocalTime &#123;<br>            <span class="hljs-keyword">return</span> LocalTime.parse(text, timeFormatter)<br>        &#125;<br><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">print</span><span class="hljs-params">(t: <span class="hljs-type">LocalTime</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: String &#123;<br>            <span class="hljs-keyword">return</span> t.format(timeFormatter)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="懒人版"><a href="#懒人版" class="headerlink" title="懒人版"></a>懒人版</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Bean<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration<br><span class="hljs-keyword">import</span> org.springframework.format.Formatter<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.<span class="hljs-keyword">annotation</span>.WebMvcConfigurer<br><span class="hljs-keyword">import</span> java.time.LocalDate<br><span class="hljs-keyword">import</span> java.time.LocalDateTime<br><span class="hljs-keyword">import</span> java.time.LocalTime<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonConfig</span> : <span class="hljs-type">WebMvcConfigurer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> dateFormatter = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>)<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> timeFormatter = DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>)<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">jackson2ObjectMapperBuilderCustomizer</span><span class="hljs-params">()</span></span>: Jackson2ObjectMapperBuilderCustomizer &#123;<br>        <span class="hljs-keyword">return</span> Jackson2ObjectMapperBuilderCustomizer &#123; builder -&gt;<br>            <span class="hljs-comment">// LocalTime</span><br>            builder.serializerByType(LocalTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeSerializer(timeFormatter))<br>            builder.deserializerByType(LocalTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeDeserializer(timeFormatter))<br><br>            <span class="hljs-comment">// LocalDate</span><br>            builder.serializerByType(LocalDateTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeSerializer(dateTimeFormatter))<br>            builder.deserializerByType(LocalDateTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeDeserializer(dateTimeFormatter))<br><br>            <span class="hljs-comment">// LocalDateTime</span><br>            builder.serializerByType(LocalDateTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeSerializer(dateTimeFormatter))<br>            builder.deserializerByType(LocalDateTime::<span class="hljs-keyword">class</span>.java, LocalDateTimeDeserializer(dateTimeFormatter))<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">localDateTimeFormatter</span><span class="hljs-params">()</span></span>: Formatter&lt;LocalDateTime&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">object</span> : Formatter&lt;LocalDateTime&gt; &#123;<br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parse</span><span class="hljs-params">(text: <span class="hljs-type">String</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: LocalDateTime &#123;<br>                <span class="hljs-keyword">return</span> LocalDateTime.parse(text, dateTimeFormatter)<br>            &#125;<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">print</span><span class="hljs-params">(t: <span class="hljs-type">LocalDateTime</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: String &#123;<br>                <span class="hljs-keyword">return</span> t.format(dateTimeFormatter)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">localDateFormatter</span><span class="hljs-params">()</span></span>: Formatter&lt;LocalDate&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">object</span> : Formatter&lt;LocalDate&gt; &#123;<br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parse</span><span class="hljs-params">(text: <span class="hljs-type">String</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: LocalDate &#123;<br>                <span class="hljs-keyword">return</span> LocalDate.parse(text, dateFormatter)<br>            &#125;<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">print</span><span class="hljs-params">(t: <span class="hljs-type">LocalDate</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: String &#123;<br>                <span class="hljs-keyword">return</span> t.format(dateFormatter)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">localTimeFormatter</span><span class="hljs-params">()</span></span>: Formatter&lt;LocalTime&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">object</span> : Formatter&lt;LocalTime&gt; &#123;<br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parse</span><span class="hljs-params">(text: <span class="hljs-type">String</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: LocalTime &#123;<br>                <span class="hljs-keyword">return</span> LocalTime.parse(text, timeFormatter)<br>            &#125;<br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">print</span><span class="hljs-params">(t: <span class="hljs-type">LocalTime</span>, locale: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Locale</span>)</span></span>: String &#123;<br>                <span class="hljs-keyword">return</span> t.format(timeFormatter)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/J080624/article/details/107065047/">SpringBoot中对LocalDateTime&#x2F;LocalDate进行格式化并解析</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring-Boot</tag>
      
      <tag>Jackson</tag>
      
      <tag>Time</tag>
      
      <tag>LocalDateTime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Security-Multi-Tenant-Test</title>
    <link href="/2024/08/16/Spring-Security-Multi-Tenant-Test/"/>
    <url>/2024/08/16/Spring-Security-Multi-Tenant-Test/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security-Multi-Tenant-Test"><a href="#Spring-Security-Multi-Tenant-Test" class="headerlink" title="Spring-Security-Multi-Tenant-Test"></a>Spring-Security-Multi-Tenant-Test</h1><p>需求: 多租户系统, 自定义 SpringSecurity 认证, 登录成功后返回用户信息, 在测试中, 可以使用MockUser 完成正常的获取租户信息</p><blockquote><p>实现思路</p><ol><li>自定义认证过滤器 TenantCaptchaAuthenticationFilter</li><li>JWT Util, 获取Token</li><li>添加JWT拦截器, 过滤Token设置到Content中</li><li>设置自己 MockUser Annotation </li><li>完成 MockUser Annotation WithSecurityContextFactory</li></ol></blockquote><h3 id="SpringSecurityConfig"><a href="#SpringSecurityConfig" class="headerlink" title="SpringSecurityConfig"></a>SpringSecurityConfig</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper<br><span class="hljs-keyword">import</span> com.zhengchalei.service.sys.config.GlobalException<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Value<br><span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Bean<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager<br><span class="hljs-keyword">import</span> org.springframework.security.config.<span class="hljs-keyword">annotation</span>.authentication.configuration.AuthenticationConfiguration<br><span class="hljs-keyword">import</span> org.springframework.security.config.<span class="hljs-keyword">annotation</span>.method.configuration.EnableMethodSecurity<br><span class="hljs-keyword">import</span> org.springframework.security.config.<span class="hljs-keyword">annotation</span>.web.builders.HttpSecurity<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@EnableMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringSecurityConfig</span>(<br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;\$&#123;spring.profiles.active&#125;&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> profile: String,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> objectMapper: ObjectMapper,<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> tenantCaptchaAuthenticationProvider: TenantCaptchaAuthenticationProvider<br>) &#123;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">securityFilterChain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        http: <span class="hljs-type">HttpSecurity</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        jwtProvider: <span class="hljs-type">JwtProvider</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        authenticationManager: <span class="hljs-type">AuthenticationManager</span></span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>: SecurityFilterChain &#123;<br>        <span class="hljs-keyword">val</span> tenantCaptchaAuthenticationFilter = TenantCaptchaAuthenticationFilter()<br>        tenantCaptchaAuthenticationFilter.setAuthenticationManager(authenticationManager)<br>        <span class="hljs-keyword">return</span> http<br>            .addFilterBefore(<br>                JwtConfigurer.JwtAuthorizationFilter(jwtProvider),<br>                UsernamePasswordAuthenticationFilter::<span class="hljs-keyword">class</span>.java<br>            )<br>            .addFilterBefore(tenantCaptchaAuthenticationFilter, UsernamePasswordAuthenticationFilter::<span class="hljs-keyword">class</span>.java)<br>            .authenticationProvider(tenantCaptchaAuthenticationProvider)<br>            .authorizeHttpRequests &#123; authorize -&gt;<br><br>                <span class="hljs-comment">// favicon.ico</span><br>                authorize.requestMatchers(<span class="hljs-string">&quot;/favicon.ico&quot;</span>).permitAll()<br><br>                authorize.requestMatchers(<span class="hljs-string">&quot;/api/auth/login&quot;</span>).permitAll()<br>                authorize.requestMatchers(<span class="hljs-string">&quot;/api/auth/register&quot;</span>).permitAll()<br>                authorize.requestMatchers(<span class="hljs-string">&quot;/api/auth/captcha&quot;</span>).permitAll()<br>                <span class="hljs-comment">// dev</span><br>                <span class="hljs-keyword">if</span> (profile == <span class="hljs-string">&quot;dev&quot;</span> || profile == <span class="hljs-string">&quot;test&quot;</span>) &#123;<br>                    authorize.requestMatchers(<span class="hljs-string">&quot;/openapi.html&quot;</span>).permitAll()<br>                    authorize.requestMatchers(<span class="hljs-string">&quot;/openapi.yml&quot;</span>).permitAll()<br>                &#125;<br>                authorize.anyRequest().authenticated()<br>            &#125;<br>            .exceptionHandling &#123;<br>                it.authenticationEntryPoint &#123; request, response, authException -&gt;<br>                    response.sendError(<br>                        <span class="hljs-number">401</span>,<br>                        objectMapper.writeValueAsString(GlobalException.Error(authException.message ?: <span class="hljs-string">&quot;未登录&quot;</span>))<br>                    )<br>                &#125;<br>                it.accessDeniedHandler &#123; request, response, accessDeniedException -&gt;<br>                    response.sendError(<br>                        <span class="hljs-number">403</span>,<br>                        objectMapper.writeValueAsString(<br>                            GlobalException.Error(<br>                                accessDeniedException.message ?: <span class="hljs-string">&quot;无权限&quot;</span><br>                            )<br>                        )<br>                    )<br>                &#125;<br>            &#125;<br>            .sessionManagement &#123;<br>                it.disable()<br>            &#125;<br>            .csrf &#123;<br>                it.disable()<br>            &#125;<br>            .build()<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">authenticationManager</span><span class="hljs-params">(configuration: <span class="hljs-type">AuthenticationConfiguration</span>)</span></span>: AuthenticationManager &#123;<br>        <span class="hljs-keyword">return</span> configuration.authenticationManager<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TenantCaptchaAuthenticationFilter"><a href="#TenantCaptchaAuthenticationFilter" class="headerlink" title="TenantCaptchaAuthenticationFilter"></a>TenantCaptchaAuthenticationFilter</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TenantCaptchaAuthenticationFilter</span> : <span class="hljs-type">UsernamePasswordAuthenticationFilter</span>() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">attemptAuthentication</span><span class="hljs-params">(request: <span class="hljs-type">HttpServletRequest</span>, response: <span class="hljs-type">HttpServletResponse</span>)</span></span>: Authentication &#123;<br>        <span class="hljs-keyword">val</span> username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>)<br>        <span class="hljs-keyword">val</span> password = request.getParameter(<span class="hljs-string">&quot;password&quot;</span>)<br>        <span class="hljs-keyword">val</span> tenantId = request.getParameter(<span class="hljs-string">&quot;tenant&quot;</span>)<br>        <span class="hljs-keyword">val</span> captcha = request.getParameter(<span class="hljs-string">&quot;captcha&quot;</span>)<br><br>        <span class="hljs-keyword">val</span> authRequest = TenantCaptchaAuthenticationToken(<br>            username, password, tenantId, captcha<br>        )<br>        setDetails(request, authRequest)<br>        <span class="hljs-keyword">return</span> authenticationManager.authenticate(authRequest)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TenantCaptchaAuthenticationProvider"><a href="#TenantCaptchaAuthenticationProvider" class="headerlink" title="TenantCaptchaAuthenticationProvider"></a>TenantCaptchaAuthenticationProvider</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-keyword">import</span> com.zhengchalei.service.sys.config.*<br><span class="hljs-keyword">import</span> com.zhengchalei.service.sys.domain.SysTenant<br><span class="hljs-keyword">import</span> com.zhengchalei.service.sys.domain.code<br><span class="hljs-keyword">import</span> com.zhengchalei.service.sys.domain.id<br><span class="hljs-keyword">import</span> com.zhengchalei.service.sys.repository.SysTenantRepository<br><span class="hljs-keyword">import</span> com.zhengchalei.service.sys.repository.SysUserRepository<br><span class="hljs-keyword">import</span> org.babyfish.jimmer.sql.kt.ast.expression.eq<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationProvider<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.User<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TenantCaptchaAuthenticationProvider</span>(<br><span class="hljs-keyword">val</span> sysTenantRepository: SysTenantRepository,<br><span class="hljs-keyword">val</span> sysUserRepository: SysUserRepository,<br><span class="hljs-keyword">val</span> passwordEncoder: PasswordEncoder,<br>) : AuthenticationProvider &#123;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(authentication: <span class="hljs-type">Authentication</span>)</span></span>: Authentication &#123;<br>        <span class="hljs-keyword">val</span> username = authentication.name<br>        <span class="hljs-keyword">val</span> password = authentication.credentials <span class="hljs-keyword">as</span> String<br>        <span class="hljs-keyword">val</span> tenant = (authentication <span class="hljs-keyword">as</span> TenantCaptchaAuthenticationToken).tenant<br>        <span class="hljs-keyword">val</span> captcha = authentication.captcha<br>        <span class="hljs-comment">// 验证租户ID、验证码和用户密码的逻辑</span><br>        <span class="hljs-keyword">if</span> (isValidTenant(tenant) &amp;&amp; isValidCaptcha(captcha)) &#123;<br>            <span class="hljs-keyword">val</span> userDetails = loadUserByUsername(username, password, tenant)<br>            <span class="hljs-keyword">return</span> TenantCaptchaAuthenticationToken(username, password, tenant, captcha, userDetails.authorities)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> UserPasswordErrorException()<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">supports</span><span class="hljs-params">(authentication: <span class="hljs-type">Class</span>&lt;*&gt;)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">return</span> TenantCaptchaAuthenticationToken::<span class="hljs-keyword">class</span>.java.isAssignableFrom(authentication)<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isValidTenant</span><span class="hljs-params">(tenant: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-comment">// 这里实现租户ID验证逻辑</span><br>        <span class="hljs-keyword">this</span>.sysTenantRepository.sql.createQuery(SysTenant::<span class="hljs-keyword">class</span>) &#123;<br>            <span class="hljs-keyword">where</span>(table.code eq tenant)<br>            select(table.id)<br>        &#125;.fetchOneOrNull() ?: <span class="hljs-keyword">throw</span> TenantNotFoundException()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">isValidCaptcha</span><span class="hljs-params">(captcha: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-comment">// TODO 这里实现验证码验证逻辑</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> ?: <span class="hljs-keyword">throw</span> CaptchaErrorException()<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(username: <span class="hljs-type">String</span>, password: <span class="hljs-type">String</span>, tenant: <span class="hljs-type">String</span>)</span></span>: UserDetails &#123;<br>        <span class="hljs-keyword">val</span> user = sysUserRepository.findByUsernameAndTenant(username, tenant) ?: <span class="hljs-keyword">throw</span> UserNotFoundException()<br>        <span class="hljs-keyword">if</span> (!user.status) <span class="hljs-keyword">throw</span> UserDisabledException()<br>        <span class="hljs-keyword">if</span> (!passwordEncoder.matches(password, user.password)) <span class="hljs-keyword">throw</span> UserPasswordErrorException()<br>        <span class="hljs-keyword">val</span> authorityList = mutableListOf&lt;GrantedAuthority&gt;()<br>        <span class="hljs-keyword">val</span> roles = user.roles<br>        <span class="hljs-keyword">val</span> permissions = user.roles.flatMap &#123; it.permissions &#125;<br>        authorityList.addAll(permissions.map &#123; it.code &#125;.map &#123; SimpleGrantedAuthority(it) &#125;)<br>        authorityList.addAll(roles.map &#123; it.code &#125;.map &#123; <span class="hljs-string">&quot;ROLE_<span class="hljs-variable">$it</span>&quot;</span> &#125;.map &#123; SimpleGrantedAuthority(it) &#125;)<br>        <span class="hljs-keyword">return</span> User(username, user.password, user.status, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, authorityList)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="TenantCaptchaAuthenticationToken"><a href="#TenantCaptchaAuthenticationToken" class="headerlink" title="TenantCaptchaAuthenticationToken"></a>TenantCaptchaAuthenticationToken</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TenantCaptchaAuthenticationToken</span>(<br>    username: Any,<br>    password: Any,<br>    <span class="hljs-keyword">val</span> tenant: String,<br>    <span class="hljs-keyword">val</span> captcha: String,<br>    authorities: Collection&lt;GrantedAuthority&gt; = emptyList()<br>) :<br>    UsernamePasswordAuthenticationToken(username, password, authorities)<br><br></code></pre></td></tr></table></figure><h3 id="JwtTokenProvider"><a href="#JwtTokenProvider" class="headerlink" title="JwtTokenProvider"></a>JwtTokenProvider</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-keyword">import</span> jakarta.servlet.FilterChain<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse<br><span class="hljs-keyword">import</span> org.springframework.security.config.<span class="hljs-keyword">annotation</span>.SecurityConfigurerAdapter<br><span class="hljs-keyword">import</span> org.springframework.security.config.<span class="hljs-keyword">annotation</span>.web.builders.HttpSecurity<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder<br><span class="hljs-keyword">import</span> org.springframework.security.web.DefaultSecurityFilterChain<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtConfigurer</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> jwtProvider: JwtProvider) :<br>    SecurityConfigurerAdapter&lt;DefaultSecurityFilterChain, HttpSecurity&gt;() &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">configure</span><span class="hljs-params">(http: <span class="hljs-type">HttpSecurity</span>)</span></span> &#123;<br>        <span class="hljs-comment">// 实例化 JwtFilter 拦截器, 将Token util bean 传递过来</span><br>        <span class="hljs-keyword">val</span> customFilter = JwtAuthorizationFilter(jwtProvider)<br>        <span class="hljs-comment">// 将这个 jwt filter 配置在 UsernamePasswordAuthenticationFilter.class 之前</span><br>        http.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter::<span class="hljs-keyword">class</span>.java)<br>    &#125;<br><br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthorizationFilter</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> jwtProvider: JwtProvider) : OncePerRequestFilter() &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> AUTHORIZATION: String = <span class="hljs-string">&quot;Authorization&quot;</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> ACCESS_TOKEN: String = <span class="hljs-string">&quot;access_token&quot;</span><br>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">doFilterInternal</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">            request: <span class="hljs-type">HttpServletRequest</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">            response: <span class="hljs-type">HttpServletResponse</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">            filterChain: <span class="hljs-type">FilterChain</span></span></span><br><span class="hljs-params"><span class="hljs-function">        )</span></span> &#123;<br>            <span class="hljs-comment">// 这里就是获取到token</span><br>            <span class="hljs-keyword">val</span> jwt: String? = resolveToken(request)<br>            <span class="hljs-comment">// 如果 jwt不为空 然后调用了 jwtUtil 效验了 token 是否有效</span><br>            <span class="hljs-keyword">if</span> (!jwt.isNullOrBlank() &amp;&amp; jwtProvider.validateToken(jwt)) &#123;<br>                <span class="hljs-comment">// 获取 Authentication</span><br>                <span class="hljs-keyword">val</span> authentication: Authentication = jwtProvider.getAuthentication(jwt)<br>                <span class="hljs-comment">// 将 认证信息重新set 到 security context 中</span><br>                SecurityContextHolder.getContext().authentication = authentication<br>            &#125;<br>            <span class="hljs-comment">// 拦截器继续执行,</span><br>            filterChain.doFilter(request, response)<br>        &#125;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">resolveToken</span><span class="hljs-params">(request: <span class="hljs-type">HttpServletRequest</span>)</span></span>: String? &#123;<br>            <span class="hljs-comment">// 从头部信息拿到 Authorization 的内容</span><br>            <span class="hljs-keyword">val</span> bearerToken = request.getHeader(AUTHORIZATION)<br>            <span class="hljs-comment">// 如果 不为空, 且 Bearer 开头</span><br>            <span class="hljs-keyword">if</span> (!bearerToken.isNullOrBlank() &amp;&amp; bearerToken.startsWith(<span class="hljs-string">&quot;Bearer &quot;</span>)) &#123;<br>                <span class="hljs-comment">// 这里的 7 长度就是 &quot;Bearer &quot; 的长度</span><br>                <span class="hljs-keyword">return</span> bearerToken.substring(<span class="hljs-number">7</span>)<br>            &#125;<br><br>            <span class="hljs-keyword">val</span> accessToken = request.getParameter(ACCESS_TOKEN)<br>            <span class="hljs-keyword">if</span> (!accessToken.isNullOrBlank()) &#123;<br>                <span class="hljs-keyword">return</span> accessToken<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JwtProvider"><a href="#JwtProvider" class="headerlink" title="JwtProvider"></a>JwtProvider</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-keyword">import</span> com.nimbusds.jose.JOSEException<br><span class="hljs-keyword">import</span> com.nimbusds.jose.JWSAlgorithm<br><span class="hljs-keyword">import</span> com.nimbusds.jose.JWSHeader<br><span class="hljs-keyword">import</span> com.nimbusds.jose.crypto.MACSigner<br><span class="hljs-keyword">import</span> com.nimbusds.jose.crypto.MACVerifier<br><span class="hljs-keyword">import</span> com.nimbusds.jwt.JWTClaimsSet<br><span class="hljs-keyword">import</span> com.nimbusds.jwt.SignedJWT<br><span class="hljs-keyword">import</span> com.zhengchalei.service.sys.repository.SysDictRepository<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory<br><span class="hljs-keyword">import</span> org.springframework.boot.CommandLineRunner<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.User<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component<br><span class="hljs-keyword">import</span> java.util.*<br><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtProvider</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> dictRepository: SysDictRepository) : CommandLineRunner &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> logger = LoggerFactory.getLogger(JwtProvider::<span class="hljs-keyword">class</span>.java)<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> secret: ByteArray = <span class="hljs-string">&quot;zhengchalei.github.io&quot;</span>.toByteArray(Charsets.UTF_8)<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> expiration: <span class="hljs-built_in">Long</span> = <span class="hljs-number">3600L</span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">run</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> args: <span class="hljs-type">String</span>)</span></span> &#123;<br>        <span class="hljs-keyword">val</span> dict = <span class="hljs-keyword">this</span>.dictRepository.findByCode(<span class="hljs-string">&quot;jwt&quot;</span>)<br>        <span class="hljs-keyword">val</span> dictItems = dict?.dictItems ?: emptyList()<br>        <span class="hljs-comment">// 获取 secret</span><br>        <span class="hljs-keyword">val</span> secret = dictItems.find &#123; it.code == <span class="hljs-string">&quot;secret&quot;</span> &#125;<br>        <span class="hljs-comment">// 获取 expired</span><br>        <span class="hljs-keyword">val</span> expired = dictItems.find &#123; it.code == <span class="hljs-string">&quot;expired&quot;</span> &#125;<br><br>        <span class="hljs-keyword">when</span> &#123;<br>            secret == <span class="hljs-literal">null</span> -&gt; &#123;<br>                logger.error(<span class="hljs-string">&quot;JWT 参数初始化失败, 缺少 &#x27;secret&#x27;, 正在使用默认值: 危险&quot;</span>)<br>                <span class="hljs-keyword">this</span>.secret = <span class="hljs-string">&quot;default-secret&quot;</span>.toByteArray(Charsets.UTF_8)<br>            &#125;<br><br>            secret.<span class="hljs-keyword">data</span>.toByteArray(Charsets.UTF_8).size &lt; <span class="hljs-number">32</span> -&gt; &#123;<br>                logger.error(<span class="hljs-string">&quot;JWT 参数错误, &#x27;secret&#x27; 必须大于 32 个字符, 正在使用默认值: 危险&quot;</span>)<br>            &#125;<br><br>            <span class="hljs-keyword">else</span> -&gt; &#123;<br>                <span class="hljs-keyword">this</span>.secret = secret.<span class="hljs-keyword">data</span>.toByteArray(Charsets.UTF_8)<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">when</span> &#123;<br>            expired == <span class="hljs-literal">null</span> -&gt; &#123;<br>                logger.warn(<span class="hljs-string">&quot;JWT 参数初始化失败, 缺少 &#x27;expired&#x27;&quot;</span>)<br>                <span class="hljs-keyword">this</span>.expiration = <span class="hljs-number">3600L</span> <span class="hljs-comment">// 默认过期时间为 1 小时</span><br>            &#125;<br><br>            expired.<span class="hljs-keyword">data</span>.toLong() &lt; <span class="hljs-number">0</span> -&gt; &#123;<br>                logger.warn(<span class="hljs-string">&quot;JWT 参数初始化错误, &#x27;expired&#x27; 必须大于 0 , 正在使用默认值: 危险&quot;</span>)<br>            &#125;<br><br>            <span class="hljs-keyword">else</span> -&gt; &#123;<br>                <span class="hljs-keyword">this</span>.expiration = expired.<span class="hljs-keyword">data</span>.toLong() * <span class="hljs-number">1000</span> <span class="hljs-comment">// 转换为毫秒</span><br>            &#125;<br>        &#125;<br><br>        logger.info(<span class="hljs-string">&quot;jwt 参数初始化完毕&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建一个 JWT。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 签名后的 JWT 对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> JOSEException 如果签名过程中出现错误</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createToken</span><span class="hljs-params">(authentication: <span class="hljs-type">TenantCaptchaAuthenticationToken</span>)</span></span>: String &#123;<br>        <span class="hljs-comment">// Header</span><br>        <span class="hljs-keyword">val</span> header = JWSHeader(JWSAlgorithm.HS256)<br><br>        <span class="hljs-comment">// Payload</span><br>        <span class="hljs-keyword">val</span> claimsSet = JWTClaimsSet.Builder()<br>            .subject(authentication.name)<br>            .claim(<span class="hljs-string">&quot;username&quot;</span>, authentication.name)<br>            .claim(<br>                <span class="hljs-string">&quot;roles&quot;</span>,<br>                authentication.authorities<br>                    .filter &#123; it.authority.startsWith(<span class="hljs-string">&quot;ROLE_&quot;</span>) &#125;<br>                    .map &#123; it.authority &#125;<br>                    .joinToString(<span class="hljs-string">&quot;,&quot;</span>)<br>            )<br>            .claim(<br>                <span class="hljs-string">&quot;permissions&quot;</span>,<br>                authentication.authorities<br>                    .filter &#123; !it.authority.startsWith(<span class="hljs-string">&quot;ROLE_&quot;</span>) &#125;<br>                    .map &#123; it.authority &#125;<br>                    .joinToString(<span class="hljs-string">&quot;,&quot;</span>)<br>            )<br>            .claim(<span class="hljs-string">&quot;tenant&quot;</span>, authentication.tenant)<br>            .expirationTime(Date(System.currentTimeMillis() + expiration)) <span class="hljs-comment">// 1 hour from now</span><br>            .build()<br><br>        <span class="hljs-keyword">val</span> signedJWT = SignedJWT(header, claimsSet)<br>        <span class="hljs-keyword">val</span> signer = MACSigner(secret)<br>        signedJWT.sign(signer)<br>        <span class="hljs-keyword">return</span> signedJWT.serialize()<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析一个 JWT 字符串。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token JWT 字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解析后的 SignedJWT 对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">parseToken</span><span class="hljs-params">(token: <span class="hljs-type">String</span>)</span></span>: SignedJWT &#123;<br>        <span class="hljs-keyword">return</span> SignedJWT.parse(token)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证 JWT 是否有效。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token 签名后的 JWT 对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果 JWT 有效则返回 true，否则返回 false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">validateToken</span><span class="hljs-params">(token: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">val</span> jwt = parseToken(token)<br>        <span class="hljs-keyword">val</span> verifier = MACVerifier(secret)<br>        <span class="hljs-keyword">if</span> (!jwt.verify(verifier)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">val</span> claimsSet = jwt.jwtClaimsSet<br>        <span class="hljs-keyword">return</span> !claimsSet.expirationTime.before(Date())<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAuthentication</span><span class="hljs-params">(token: <span class="hljs-type">String</span>)</span></span>: Authentication &#123;<br>        <span class="hljs-keyword">val</span> jwt: SignedJWT = parseToken(token)<br>        <span class="hljs-keyword">val</span> jwtClaimsSet = jwt.jwtClaimsSet ?: <span class="hljs-keyword">throw</span> RuntimeException(<span class="hljs-string">&quot;JWT ClaimsSet is null&quot;</span>)<br>        <span class="hljs-keyword">val</span> permissions = jwtClaimsSet.getStringClaim(<span class="hljs-string">&quot;permissions&quot;</span>).split(<span class="hljs-string">&quot;,&quot;</span>)<br>        <span class="hljs-keyword">val</span> roles = jwtClaimsSet.getStringClaim(<span class="hljs-string">&quot;roles&quot;</span>).split(<span class="hljs-string">&quot;,&quot;</span>)<br>        <span class="hljs-keyword">val</span> tenant = jwtClaimsSet.getStringClaim(<span class="hljs-string">&quot;tenant&quot;</span>)<br><br>        <span class="hljs-comment">// 构建权限</span><br>        <span class="hljs-keyword">val</span> authorities = mutableListOf(permissions, roles).flatten().map &#123; SimpleGrantedAuthority(it) &#125;<br><br>        <span class="hljs-keyword">val</span> principal = User(jwtClaimsSet.subject, <span class="hljs-string">&quot;&quot;</span>, authorities)<br><br>        <span class="hljs-keyword">return</span> TenantCaptchaAuthenticationToken(<br>            username = principal,<br>            password = <span class="hljs-string">&quot;&quot;</span>,<br>            tenant = tenant,<br>            captcha = <span class="hljs-string">&quot;&quot;</span>,<br>            authorities = authorities<br>        )<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getListClaimsSet</span><span class="hljs-params">(jwtClaimsSet: <span class="hljs-type">JWTClaimsSet</span>, key: <span class="hljs-type">String</span>)</span></span>: List&lt;String&gt; &#123;<br>        <span class="hljs-keyword">return</span> (jwtClaimsSet.getClaim(key) <span class="hljs-keyword">as</span> List&lt;*&gt;).map &#123; it <span class="hljs-keyword">as</span> String &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><h3 id="WithMockTenantUser"><a href="#WithMockTenantUser" class="headerlink" title="WithMockTenantUser"></a>WithMockTenantUser</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> org.springframework.security.test.context.support.WithSecurityContext<br><br><span class="hljs-meta">@Retention(AnnotationRetention.RUNTIME)</span><br><span class="hljs-meta">@WithSecurityContext(factory = WithMockTenantUserSecurityContextFactory::class)</span><br><span class="hljs-keyword">annotation</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WithMockTenantUser</span>(<br>    <span class="hljs-keyword">val</span> username: String = <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-keyword">val</span> name: String = <span class="hljs-string">&quot;超级管理员&quot;</span>,<br>    <span class="hljs-keyword">val</span> password: String = <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-keyword">val</span> roles: Array&lt;String&gt; = [<span class="hljs-string">&quot;ADMIN&quot;</span>],<br>    <span class="hljs-keyword">val</span> authorities: Array&lt;String&gt; = [],<br>    <span class="hljs-keyword">val</span> tenant: String = <span class="hljs-string">&quot;default&quot;</span><br>)<br><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>WithMockTenantUserSecurityContextFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> com.zhengchalei.service.sys.config.security.TenantCaptchaAuthenticationToken<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContext<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.User<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails<br><span class="hljs-keyword">import</span> org.springframework.security.test.context.support.WithSecurityContextFactory<br><span class="hljs-keyword">import</span> java.util.*<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WithMockTenantUserSecurityContextFactory</span><br><br>    : WithSecurityContextFactory&lt;WithMockTenantUser&gt; &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createSecurityContext</span><span class="hljs-params">(<span class="hljs-keyword">annotation</span>: <span class="hljs-type">WithMockTenantUser</span>)</span></span>: SecurityContext &#123;<br>        <span class="hljs-keyword">val</span> context = SecurityContextHolder.createEmptyContext()<br>        <span class="hljs-keyword">val</span> authorities: MutableList&lt;GrantedAuthority&gt; = ArrayList()<br>        authorities.addAll(Arrays.stream(<span class="hljs-keyword">annotation</span>.authorities)<br>            .map &#123; SimpleGrantedAuthority(it) &#125;<br>            .toList())<br>        authorities.addAll(Arrays.stream(<span class="hljs-keyword">annotation</span>.roles)<br>            .map &#123; <span class="hljs-string">&quot;ROLE_<span class="hljs-variable">$it</span>&quot;</span> &#125;<br>            .map &#123; SimpleGrantedAuthority(it) &#125;<br>            .toList())<br>        <span class="hljs-keyword">val</span> principal: UserDetails = User(<span class="hljs-keyword">annotation</span>.username, <span class="hljs-keyword">annotation</span>.password, authorities)<br>        <span class="hljs-keyword">val</span> auth: Authentication = TenantCaptchaAuthenticationToken(principal, <span class="hljs-keyword">annotation</span>.password, <span class="hljs-keyword">annotation</span>.tenant, <span class="hljs-string">&quot;&quot;</span>, authorities)<br>        context.authentication = auth<br>        <span class="hljs-keyword">return</span> context<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@AutoConfigureMockMvc</span><br><span class="hljs-meta">@TestMethodOrder(OrderAnnotation::class)</span><br><span class="hljs-meta">@WithMockTenantUser(</span><br><span class="hljs-meta">    username = <span class="hljs-string">&quot;admin&quot;</span>,</span><br><span class="hljs-meta">    authorities = [<span class="hljs-string">&quot;sys:department:create&quot;</span>, <span class="hljs-string">&quot;sys:department:update&quot;</span>, <span class="hljs-string">&quot;sys:department:delete&quot;</span>, <span class="hljs-string">&quot;sys:department:list&quot;</span>, <span class="hljs-string">&quot;sys:department:page&quot;</span>, <span class="hljs-string">&quot;sys:department:tree&quot;</span>, <span class="hljs-string">&quot;sys:department:tree-root&quot;</span>, <span class="hljs-string">&quot;sys:department:id&quot;</span>]</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SysDepartmentControllerTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> mockMvc: MockMvc<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> objectMapper: ObjectMapper<br><br>    <span class="hljs-meta">@Order(Integer.MIN_VALUE)</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">create</span><span class="hljs-params">()</span></span> &#123;<br>        mockMvc.post(<span class="hljs-string">&quot;/api/sys/department/create&quot;</span>) &#123;<br>            content = objectMapper.writeValueAsString(<br>                SysDepartmentCreateInput(<br>                    name = <span class="hljs-string">&quot;测试部门&quot;</span>,<br>                    description = <span class="hljs-string">&quot;test&quot;</span>,<br>                    sort = <span class="hljs-number">1</span>,<br>                    status = <span class="hljs-literal">true</span>,<br>                    parentId = <span class="hljs-number">1</span><br>                )<br>            )<br>            contentType = MediaType.APPLICATION_JSON<br>        &#125;<br>            .andExpect &#123;<br>                status &#123; isOk() &#125;<br>                content &#123;<br>                    jsonPath(<span class="hljs-string">&quot;$.success&quot;</span>) &#123;<br>                        exists()<br>                        value(<span class="hljs-literal">true</span>)<br>                    &#125;<br>                &#125;<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringSecurity</tag>
      
      <tag>Tenant</tag>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Boot-Jdbc-AutoRowMapper</title>
    <link href="/2023/01/11/Spring-Boot-Jdbc-AutoRowMapper/"/>
    <url>/2023/01/11/Spring-Boot-Jdbc-AutoRowMapper/</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>难免会有一些需求需要用到Jdbc, 但是很讨人厌的, 他又要去写 <code>RowMapper</code> , 非常费劲</p><p>本着思考, 这TM都 <code>SpringJdbc</code> 了, 他总不会封装了个寂寞吧, 果然, 找到一个名字很奇怪的 <code>RowMapper</code> 实现</p><p><img src="/./img/8aa4167c-a1de-4014-afc9-a5bb0f978944.png" alt="8aa4167c-a1de-4014-afc9-a5bb0f978944.png"></p><h2 id="BeanPropertyRowMapper"><a href="#BeanPropertyRowMapper" class="headerlink" title="BeanPropertyRowMapper"></a>BeanPropertyRowMapper</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><blockquote><p>&#x2F;**</p><ul><li>{@link RowMapper} implementation that converts a row into a new instance</li><li>of the specified mapped target class. The mapped target class must be a</li><li>top-level class and it must have a default or no-arg constructor.</li><li></li><li><p>Column values are mapped based on matching the column name as obtained from result set</li><li>meta-data to public setters for the corresponding properties. The names are matched either</li><li>directly or by transforming a name separating the parts with underscores to the same name</li><li>using “camel” case.</li><li></li><li><p>Mapping is provided for fields in the target class for many common types, e.g.:</li><li>String, boolean, Boolean, byte, Byte, short, Short, int, Integer, long, Long,</li><li>float, Float, double, Double, BigDecimal, {@code java.util.Date}, etc.</li><li></li><li><p>To facilitate mapping between columns and fields that don't have matching names,</li><li>try using column aliases in the SQL statement like “select fname as first_name from customer”.</li><li></li><li><p>For 'null' values read from the database, we will attempt to call the setter, but in the case of</li><li>Java primitives, this causes a TypeMismatchException. This class can be configured (using the</li><li>primitivesDefaultedForNullValue property) to trap this exception and use the primitives default value.</li><li>Be aware that if you use the values from the generated bean to update the database the primitive value</li><li>will have been set to the primitive’s default value instead of null.</li><li></li><li><p>Please note that this class is designed to provide convenience rather than high performance.</li><li>For best performance, consider using a custom {@link RowMapper} implementation.</li><li></li><li>@author Thomas Risberg</li><li>@author Juergen Hoeller</li><li>@since 2.5</li><li>@param <T> the result type</li><li>@see DataClassRowMapper<br> *&#x2F;</li></ul></blockquote><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><blockquote><p>大致的意思的就是, 不能是内部类, 需要有无参构造函数(Java类默认会有一个无参构造函数, 你覆盖了要补上)<br>名称对应就行, 或者 数据库(下划线) -&gt; 实体类(驼峰)<br>有 String, boolean, Boolean, byte, Byte, short, Short, int, Integer, long, Long, float, Float, double, Double, BigDecimal, {@code java.util.Date}, etc 支持啦<br>对于 <code>null</code> 值, 会调用 set , 如果希望有基本类型默认值, 可以设置 primitivesDefaultedForNullValue &#x3D; true, (不过对于这个, 我们好像用的都不是基本类型)<br>最后就是, 啊巴拉巴拉, 这个不是为了高性能准备的, 如果要高性能你就自己写 RowMapper</p></blockquote><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>emmmm, 其实大部分场景中, 我们对性能并没有那么那么高, 我记得以前有一个问题说是, </p><blockquote><p><code>MapStruct</code> vs <code>BeanUtils</code></p></blockquote><p>厚礼蟹, 这种问题就别问了好吗, 你问我我就是说推荐 <code>MapStruct</code>, 但是我自己偷偷用 <code>BeanUtils</code>, 再说了 别人 <code>BeanUtils</code> 自己也有缓存的</p><p>借用一个 压测的结果图<br><img src="/./img/79b99c54-4dc7-49ac-8cd8-6bb380689d2c.png" alt="79b99c54-4dc7-49ac-8cd8-6bb380689d2c.png"></p><p>有这时间优化一下查询, 如果你的是纯内存操作, 那就建议用MapStruct, 早点下班, 摸摸鱼多好</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; List&lt;T&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(String sql, RowMapper&lt;T&gt; rowMapper, <span class="hljs-meta">@Nullable</span> Object... args)</span> <span class="hljs-keyword">throws</span> DataAccessException &#123;<br>    <span class="hljs-keyword">return</span> result(query(sql, args, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowMapperResultSetExtractor</span>&lt;&gt;(rowMapper)));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">this.jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;&gt;(Booking.class), args);<br></code></pre></td></tr></table></figure><p>唉, 其实这段代码很奇怪, 这就是Java的残疾泛型, 如果Java泛型是存在运行期的情况, 下完全可以用 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">this.jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;Booking&gt;(), args);<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>用用用, 仅限于基本类型和常用的一些类型, 至于嵌套一些自定义类, 还是自己 RowMapper 或者魔改吧</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ol><li><a href="https://github.com/lets-mica/mica-jmh/wiki/BeanCopy">https://github.com/lets-mica/mica-jmh/wiki/BeanCopy</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Jdbc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang在Windows下交叉编译</title>
    <link href="/2023/01/02/Golang%E5%9C%A8Windows%E4%B8%8B%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
    <url>/2023/01/02/Golang%E5%9C%A8Windows%E4%B8%8B%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给树莓派写了点东西, 因为树莓派的CPU是ARM64架构的<br>常规软件编译后跑不了, Java虽然可以装, 但是内存占用有点大</p><h2 id="借助一些工具来编译"><a href="#借助一些工具来编译" class="headerlink" title="借助一些工具来编译"></a>借助一些工具来编译</h2><ol><li>下载 Gf-Cli</li><li>配置 环境</li><li>编译参数配置</li></ol><p><a href="https://github.com/gogf/gf/releases">https://github.com/gogf/gf/releases</a> 下载合适自己系统的 Cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gf build main.go -n app -a arm64 -s linux -p .<br></code></pre></td></tr></table></figure><p><img src="/./img/10012b83-fca6-430d-900a-dd27e6264c23.png" alt="10012b83-fca6-430d-900a-dd27e6264c23.png"></p><h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h2><ol><li><a href="https://github.com/gogf/gf/releases">https://github.com/gogf/gf/releases</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Golang</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Boot-WebSocket</title>
    <link href="/2023/01/02/Spring-Boot-WebSocket/"/>
    <url>/2023/01/02/Spring-Boot-WebSocket/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在 SpringBoot WebSocket 中, 我们使用常规注解, <code>@ServerEndpoint</code> 之后会出现无法注入的问题</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>在上面写到我们需要补充 configuration 配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CdiAwareConfigurator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServerEndpointConfig</span>.Configurator &#123;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getEndpointInstance</span><span class="hljs-params">(Class&lt;T&gt; endpointClass)</span> <span class="hljs-keyword">throws</span> InstantiationException &#123;<br>        <span class="hljs-keyword">return</span> CDI.current().select(endpointClass).get();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@ServerEndpoint(value = &quot;/chat&quot;, configurator = CdiAwareConfigurator.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChatEndpoint</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>Spring 提供的方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringWebSocketHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSocketHandler</span> &#123;<br><br>    <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;String, WebSocketSession&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> WebSocketSession session)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        hashMap.put(session.getId(), session);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> WebSocketSession session, <span class="hljs-meta">@NotNull</span> WebSocketMessage&lt;?&gt; message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> message.getPayload();<br>        session.sendMessage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextMessage</span>(<span class="hljs-string">&quot;echo message&quot;</span> + LocalDateTime.now().toString()));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTransportError</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> WebSocketSession session, <span class="hljs-meta">@NotNull</span> Throwable exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        log.error(<span class="hljs-string">&quot;消息接受错误: &#123;&#125; , &#123;&#125;&quot;</span>, session.getId(), exception.getMessage());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> WebSocketSession session, <span class="hljs-meta">@NotNull</span> CloseStatus closeStatus)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        hashMap.remove(session.getId());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsPartialMessages</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@ConditionalOnWebApplication</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfigurator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SpringWebSocketHandler springWebSocketHandler;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerWebSocketHandlers</span><span class="hljs-params">(WebSocketHandlerRegistry registry)</span> &#123;<br>        registry.addHandler(springWebSocketHandler, <span class="hljs-string">&quot;/&quot;</span>).setAllowedOrigins(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ol><li><a href="https://stackoverflow.com/questions/51175990/using-cdi-injection-in-tomcat-websocket-serverendpoint">https://stackoverflow.com/questions/51175990/using-cdi-injection-in-tomcat-websocket-serverendpoint</a></li><li><a href="https://stackoverflow.com/questions/30483094/springboot-serverendpoint-failed-to-find-the-root-webapplicationcontext">https://stackoverflow.com/questions/30483094/springboot-serverendpoint-failed-to-find-the-root-webapplicationcontext</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows(WSL2) 开发环境安装</title>
    <link href="/2022/12/01/Windows(WSL2)%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <url>/2022/12/01/Windows(WSL2)%20%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h2 id="install-wsl"><a href="#install-wsl" class="headerlink" title="install wsl"></a>install wsl</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl --install<br></code></pre></td></tr></table></figure><h3 id="set-version-2"><a href="#set-version-2" class="headerlink" title="set version 2"></a>set version 2</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl --set-default-version 2<br></code></pre></td></tr></table></figure><h3 id="install-debian"><a href="#install-debian" class="headerlink" title="install debian"></a>install debian</h3><ol><li>open the microsoft store</li><li>search <code>debian</code> install</li></ol><h2 id="install-sdkman"><a href="#install-sdkman" class="headerlink" title="install sdkman"></a>install sdkman</h2><h3 id="before-install-sdkman-you-need-todo"><a href="#before-install-sdkman-you-need-todo" class="headerlink" title="before install sdkman you need todo"></a>before install sdkman you need todo</h3><p><a href="https://www.graalvm.org/22.3/reference-manual/native-image/#prerequisites">https://www.graalvm.org/22.3/reference-manual/native-image/#prerequisites</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install zip<br>sudo apt-get install unzip<br>sudo apt-get install curl<br>sudo apt-get install build-essential libz-dev zlib1g-dev<br></code></pre></td></tr></table></figure><h3 id="install-sdkman-1"><a href="#install-sdkman-1" class="headerlink" title="install sdkman"></a>install sdkman</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -s <span class="hljs-string">&quot;https://get.sdkman.io&quot;</span> | bash<br></code></pre></td></tr></table></figure><h2 id="install-graalvm-jdk"><a href="#install-graalvm-jdk" class="headerlink" title="install graalvm jdk"></a>install graalvm jdk</h2><h3 id="jdk-search"><a href="#jdk-search" class="headerlink" title="jdk search"></a>jdk search</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sdk java list<br></code></pre></td></tr></table></figure><h3 id="install-17"><a href="#install-17" class="headerlink" title="install 17"></a>install 17</h3><table><thead><tr><th>Version</th><th>Key</th></tr></thead><tbody><tr><td>22.3.r19</td><td>22.3.r19-grl</td></tr><tr><td>22.3.r17</td><td>22.3.r17-grl</td></tr><tr><td>22.3.r11</td><td>22.3.r11-grl</td></tr></tbody></table><h3 id="install-jdk-build"><a href="#install-jdk-build" class="headerlink" title="install jdk-build"></a>install jdk-build</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sdk install java 22.3.r17-grl<br></code></pre></td></tr></table></figure><h3 id="install-native-image"><a href="#install-native-image" class="headerlink" title="install native-image"></a>install native-image</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing">gu install <span class="hljs-keyword">native</span>-<span class="hljs-built_in">image</span><br></code></pre></td></tr></table></figure><h2 id="Test-Native-Build"><a href="#Test-Native-Build" class="headerlink" title="Test Native Build"></a>Test Native Build</h2><p>create a java file <code>HelloWorld.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">javac HelloWorld.java<br>native-image HelloWorld<br>./helloworld<br></code></pre></td></tr></table></figure><h2 id="wsl-replace-other-linux"><a href="#wsl-replace-other-linux" class="headerlink" title="wsl replace other linux"></a>wsl replace other linux</h2><h3 id="list-for-wsl"><a href="#list-for-wsl" class="headerlink" title="list for wsl"></a>list for wsl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wslconfig /l<br></code></pre></td></tr></table></figure><table><thead><tr><th>OS</th><th>default</th></tr></thead><tbody><tr><td>docker-desktop-data</td><td></td></tr><tr><td>docker-desktop</td><td></td></tr><tr><td>Ubuntu</td><td>(默认)</td></tr><tr><td>Debian</td><td></td></tr></tbody></table><h3 id="set-Debian-is-default"><a href="#set-Debian-is-default" class="headerlink" title="set Debian is default"></a>set Debian is default</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wslconfig /setdefault Debian<br></code></pre></td></tr></table></figure><h3 id="uninstall-Ubuntu"><a href="#uninstall-Ubuntu" class="headerlink" title="uninstall Ubuntu"></a>uninstall Ubuntu</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wslconfig /unregister Ubuntu<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>wsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
